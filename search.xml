<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SFWRTECH 3IT3 Lab #1 Layer 3 and 4 Protocols</title>
      <link href="/posts/4759/"/>
      <url>/posts/4759/</url>
      
        <content type="html"><![CDATA[<p>Course section: SFWRTECH 3IT3:Fundamentals of Networking - SFWRTECH_3IT3_poonh_2205</p><p>SFWRTECH 3IT3 – Fundamentals of Networking<br>Lab #1: Layer 3 and 4 Protocols<br>Following &amp; Answers Record</p><a id="more"></a><h1 id="VM"><a href="#VM" class="headerlink" title="VM"></a>VM</h1><p>Default gateway : 10.0.2.1</p><p>Windows1 IP : 10.0.2.4<br>Windows2 IP : 10.0.2.5<br>CentOS01 IP : 10.0.2.8 (with httpd)<br>CentOS02 IP : 10.0.2.9</p><h2 id="Step-8"><a href="#Step-8" class="headerlink" title="Step 8"></a>Step 8</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig &#x2F;all</span><br></pre></td></tr></table></figure><h2 id="Step-9"><a href="#Step-9" class="headerlink" title="Step 9"></a>Step 9</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netsh interface ipv4 set dns &quot;Ethernet&quot; static 8.8.8.8 primary</span><br><span class="line">netsh interface ipv4 add dns &quot;Ethernet&quot; 192.168.1.1</span><br><span class="line">ipconfig &#x2F;all</span><br></pre></td></tr></table></figure><p>Differences between dynamic and manual IP config:</p><ul><li>DHCP enabled in dynamic and disabled in manual</li><li>DHCP server in dynamic is 10.0.2.3 but disappeared in manual</li></ul><h2 id="Step-12"><a href="#Step-12" class="headerlink" title="Step 12"></a>Step 12</h2><p>Show ARP cache</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arp -a</span><br></pre></td></tr></table></figure><p>Result:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Physical Address of 10.0.2.4 : 08-00-27-c8-13-4b</span><br><span class="line"></span><br><span class="line">Interface: 10.0.2.4 --- 0x3</span><br><span class="line">internet Address | Physical Address | Type         | Purpose</span><br><span class="line">10.0.2.1           52-54-00-12-35-00  dynamic        Default Gateway</span><br><span class="line">10.0.2.3           08-00-27-75-7c-58  dynamic        DHCP Server</span><br><span class="line">10.0.2.5           08-00-27-2b-a4-3e  dynamic        Neighbouring VM</span><br><span class="line">10.0.2.255         ff-ff-ff-ff-ff-ff  static         Directed Broadcast</span><br><span class="line">224.0.0.22         01-00-5e-00-00-16  static</span><br><span class="line">224.0.0.251        01-00-5e-00-00-fb  static</span><br><span class="line">224.0.0.252        01-00-5e-00-00-fc  static</span><br><span class="line">255.255.255.255    ff-ff-ff-ff-ff-ff  static         Flooded Broadcast</span><br><span class="line"></span><br><span class="line">224.0.0.22 were appeared after browsing a website.</span><br><span class="line"></span><br><span class="line">Wireshark OUI Lookup Tool: https:&#x2F;&#x2F;www.wireshark.org&#x2F;tools&#x2F;oui-lookup.html</span><br><span class="line"></span><br><span class="line">OUI for 08-00-27 : PCS Computer Systems GmbH</span><br></pre></td></tr></table></figure><h2 id="Step-13"><a href="#Step-13" class="headerlink" title="Step 13"></a>Step 13</h2><p>Using <code>Windows1 10.0.2.4</code> ,<br>delete all entries in ARP cache <code>arp -d</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arp -d</span><br><span class="line">arp -a</span><br><span class="line">ping 10.0.2.5</span><br><span class="line">arp -a</span><br></pre></td></tr></table></figure><p>A new entry <code>10.0.2.5 08-00-27-2b-a4-3e</code> was created in ARP cache after <code>ping 10.0.2.5</code>.</p><p>There is no ARP entry for default gateway because <code>Windows2 10.0.2.5</code> is in the same subnet that <code>Windows1 10.0.2.4</code> in, so data can be sent directly to neighbours and not to the gateway to handle further.</p><p>I can use <code>ipconfig</code> command to get the ARP entry for default gateway.</p><h2 id="Step-14"><a href="#Step-14" class="headerlink" title="Step 14"></a>Step 14</h2><p>After change MAC of <code>Windows2 10.0.2.5</code> from <code>08-00-27-2b-a4-3e</code> to <code>08-00-27-11-22-33</code> and run <code>arp -a</code> on <code>Windows1 10.0.2.4</code>, the ARP entry of <code>Windows2 10.0.2.5</code> is dynamically changed to <code>08-00-27-11-22-33</code>. (yes, if I switch Windows1 quickly enough, the MAC is not changed yet)</p><p>I ping to <code>Windows2 10.0.2.5</code> and receive 4 <code>Request timed out</code> after MAC changed.</p><h2 id="Step-15"><a href="#Step-15" class="headerlink" title="Step 15"></a>Step 15</h2><p>After I select “Turn on Windows Defender Firewall” under the<br>“Public network settings” on <code>Windows2 10.0.2.5</code>, <code>Windows1 10.0.2.4</code> receives 4 <code>Request timed out</code> on running <code>ping 10.0.2.5</code>.</p><h2 id="Step-19"><a href="#Step-19" class="headerlink" title="Step 19"></a>Step 19</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su -</span><br><span class="line">yum -y install nc httpd</span><br><span class="line">yum -y install nc</span><br></pre></td></tr></table></figure><h2 id="Step-20"><a href="#Step-20" class="headerlink" title="Step 20"></a>Step 20</h2><p>Create <code>index.html</code> file</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;&lt;body&gt;Hello World&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>Save to <code>/var/www/html/index.html</code></p><h2 id="Step-21"><a href="#Step-21" class="headerlink" title="Step 21"></a>Step 21</h2><p>Run <code>ifconfig</code> or <code>ip addr</code> on CentOS01, find device <code>enp0s3</code> with <code>inet 10.0.2.8/24</code></p><p>Run</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;80&#x2F;tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>on CentOS01</p><p>Run <code>ifconfig</code> or <code>ip addr</code> on CentOS02, find device <code>enp0s3</code> with <code>inet 10.0.2.9/24</code></p><h2 id="Step-22"><a href="#Step-22" class="headerlink" title="Step 22"></a>Step 22</h2><p>Start Apache web server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable httpd.service</span><br><span class="line">systemctl start httpd.service</span><br></pre></td></tr></table></figure><h2 id="Step-23"><a href="#Step-23" class="headerlink" title="Step 23"></a>Step 23</h2><p>I can see the “Hello World” page through <code>CentOS02 10.0.2.9</code> by browsing <code>10.0.2.8</code></p><h2 id="Step-24"><a href="#Step-24" class="headerlink" title="Step 24"></a>Step 24</h2><p>Run <code>nc -ul 1234</code> on <code>CentOS01 10.0.2.8</code> and <code>nc 10.0.2.8 -u 1234</code> on <code>CentOS02 10.0.2.9</code></p><p>Then type <code>abc</code> on <code>CentOS02 10.0.2.9</code> and press Enter. I receive “no route to host”.</p><p>Then release port number <code>1234</code> using <code>udp</code> from firewall of <code>CentOS01 10.0.2.8</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;1234&#x2F;udp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h2 id="Step-25"><a href="#Step-25" class="headerlink" title="Step 25"></a>Step 25</h2><p>If I first try to send a message from <code>CentOS01 10.0.2.8</code>, nothing happens, because UDP protocal is connectionless. The server <code>CentOS01 10.0.2.8</code> is just listening to <code>port 1234</code> but it does not have connection to the client <code>CentOS02 10.0.2.9</code> because the client <code>CentOS02 10.0.2.9</code> does not need to build connection with the server <code>CentOS01 10.0.2.8</code> very firstly before sending out messages.</p><h2 id="Step-26"><a href="#Step-26" class="headerlink" title="Step 26"></a>Step 26</h2><p>Run <code>nc -l 5678</code> on <code>CentOS01 10.0.2.8</code> and <code>nc 10.0.2.8 5678</code> on <code>CentOS02 10.0.2.9</code>.</p><p>This returns “no route to host” again because <code>port 5678</code> is not released from the firewall. A TCP <code>RST</code> flag is sent back to <code>CentOS02 10.0.2.9</code> so <code>CentOS02 10.0.2.9</code> knows the connection is aborted.</p><h2 id="Step-27"><a href="#Step-27" class="headerlink" title="Step 27"></a>Step 27</h2><p>Release port number <code>5678</code> using <code>tcp</code> from firewall of <code>CentOS01 10.0.2.8</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;5678&#x2F;tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h2 id="Step-28"><a href="#Step-28" class="headerlink" title="Step 28"></a>Step 28</h2><p>I first try to send a message from the server <code>CentOS01 10.0.2.8</code>, and the client <code>CentOS02 10.0.2.9</code> gets the message because both sides must have connection built under TCP protocal before any messages sent.</p><p>When I press <code>CTRL + C</code> on the client <code>CentOS02 10.0.2.9</code>, the server <code>CentOS01 10.0.2.8</code> is also down because the client <code>CentOS02 10.0.2.9</code> sends out a <code>FIN</code> flag and expects to end the connection. The server <code>CentOS01 10.0.2.8</code> sends a <code>FIN</code> flag again with a <code>ACK</code> flag for confirming, and the client <code>CentOS02 10.0.2.9</code> confirms that. TCP protocal only allows point to point transport due to one connection.</p><h2 id="Step-29"><a href="#Step-29" class="headerlink" title="Step 29"></a>Step 29</h2><p>Run <code>route -n</code> on <code>CentOS01 10.0.2.8</code> to identify the default gateway.</p><p>Run <code>cat /etc/resolv.conf</code> on <code>CentOS01 10.0.2.8</code> to check DNS config.</p><h2 id="Post-Lab-Questions"><a href="#Post-Lab-Questions" class="headerlink" title="Post-Lab Questions"></a>Post-Lab Questions</h2><p>An ARP cache may contain multiple entries with the same MAC address, even though the IP addresses listed are different. This commonly occurs in some networks. Describe the configuration of network devices that could result in this behaviour.</p><p>Answer:</p><ol><li>A network with hosts that have a NIC binded with multiple IP addresses</li><li>Web server binded with IP addresses, so that the website can be surfed through multiple IP addresses</li></ol><p>In classful IP addressing, what classful network would your Windows and CentOS IP addresses normally belong to? What “class” do they actually belong to, and why? Write the network address for the VMs in CIDR notation. What is the maximum number of hosts that can be configured in this subnet?</p><p>Answer:<br>Subnet Mask is <code>255.255.255.0</code> so it is actually a <code>Class C</code> =&gt; Network Address <code>10.0.2.0/24</code>. Number of possible hosts: <code>2 ^ 8 - 2 = 254</code>.</p><p>How could a computer detect an IP address conflict in the network when starting up, before it finishes loading its own IP network configuration? In other words, how could a computer determine whether an IP address is already in use on the network before it attempts to configure its network interface using the same address (which would then result in a conflict)?</p><p>Answer:</p><ol><li>Ask DHCP server to get a valid IP address.</li><li>Ping all possible IP addresses to see which is not in use.</li></ol>]]></content>
      
      
      <categories>
          
          <category> Lab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SFWRTECH 3IT3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构之栈 Stack 和队列 Queue</title>
      <link href="/posts/3164/"/>
      <url>/posts/3164/</url>
      
        <content type="html"><![CDATA[<p>栈（Stack）和队列（Queue），了解栈和队列的基础知识，学习它们的基础应用。</p><a id="more"></a><h1 id="栈 Stack"><a href="# 栈 Stack" class="headerlink" title="栈 Stack"></a>栈 Stack</h1><p>栈 Stack 是一种线性结构，是线性表的一种具体形式。栈这种后进先出（Last In First Out，LIFO）的应用非常广泛，例如网页的前进后退功能，编辑器的后一步前一步功能，方法调用时的函数栈等等。</p><p>栈 Stack 的特性：</p><ul><li>栈的元素必须“后进先出”</li><li>栈的操作只能于线性表表尾进行</li><li>栈的表尾被称为栈顶（Top），栈的表头被称为栈底（bottom）</li></ul><p>栈 Stack 的操作：</p><ul><li>插入操作（Push），进栈</li><li>删除操作（Pop），出栈</li></ul><p><img src="/gallery/data-structure-stack.png" alt="Stack Pop And Push"></p><h2 id="栈的顺序存储结构"><a href="# 栈的顺序存储结构" class="headerlink" title="栈的顺序存储结构"></a>栈的顺序存储结构 </h2><p> 应用顺序存储结构的栈，元素必须从开始表尾进行操作，从而节省下元素前移补充位置的操作，而不像链式结构可以从表头操作。当栈初始化时，不含有任何数据的栈被称为空栈，此时栈顶就是栈底。</p><h2 id="栈的链式存储结构"><a href="# 栈的链式存储结构" class="headerlink" title="栈的链式存储结构"></a>栈的链式存储结构 </h2><p><strong> 栈一般使用顺序存储结构 </strong> 实现。使用链式存储结构时，栈底为链表头部，栈顶为链表尾部。</p><h2 id="使用栈来进行进制转换"><a href="# 使用栈来进行进制转换" class="headerlink" title="使用栈来进行进制转换"></a>使用栈来进行进制转换 </h2><p> 例子，使用顺序存储结构的栈计算把 <code>8</code> 位数的二进制数转换成十进制数。</p><figure class="highlight js"><figcaption><span>Javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stack = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]; <span class="comment">// 11001001 (2)</span></span><br><span class="line"><span class="comment">// 1*2^0 + 0*2^1 + 0*2^2 + 1*2^3 + 0*2^4 + 0*2^5 + 1*2^6 + 1*2^7</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> power = <span class="number">0</span>; <span class="comment">// start with power of 0 in first digit</span></span><br><span class="line"><span class="keyword">while</span> (stack.length) &#123;</span><br><span class="line">  result += stack.pop() * <span class="built_in">Math</span>.pow(<span class="number">2</span>, power++);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// result = 201 (10)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Faster way in JavaScript</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'11001001'</span>, <span class="number">2</span>).toString(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>例子，使用顺序存储结构的栈计算把 <code>8</code> 位数的二进制数转换成八进制数。</p><figure class="highlight js"><figcaption><span>Javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stack = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]; <span class="comment">// 11001001 (2)</span></span><br><span class="line"><span class="comment">// 001=&gt;1, 001=&gt;1, 11=&gt;3, final 311 (8)</span></span><br><span class="line"><span class="keyword">let</span> temp = [];</span><br><span class="line"><span class="keyword">while</span> (stack.length) &#123;</span><br><span class="line">  <span class="comment">// 3-digit pair</span></span><br><span class="line">  <span class="keyword">let</span> d0 = stack.pop() | <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> d1 = (stack.pop() | <span class="number">0</span>) * <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">let</span> d2 = (stack.pop() | <span class="number">0</span>) * <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">let</span> D = d0 + d1 + d2;</span><br><span class="line">  temp.push(D);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = temp.reverse().join(<span class="string">''</span>); <span class="comment">// result = 311 (8)</span></span><br><span class="line">temp = <span class="built_in">parseInt</span>(result, <span class="number">8</span>); <span class="comment">// 201 (10)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Faster way in JavaScript</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'11001001'</span>, <span class="number">2</span>).toString(<span class="number">8</span>);</span><br></pre></td></tr></table></figure><p>例子，使用顺序存储结构的栈计算把 <code>8</code> 位数的二进制数转换成十六进制数。</p><figure class="highlight js"><figcaption><span>Javascript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stack = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]; <span class="comment">// 11001001 (2)</span></span><br><span class="line"><span class="comment">// 1001=&gt;9, 1100=&gt;C, final C9 (16)</span></span><br><span class="line"><span class="keyword">let</span> letters = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>];</span><br><span class="line"><span class="keyword">let</span> temp = [];</span><br><span class="line"><span class="keyword">while</span> (stack.length) &#123;</span><br><span class="line">  <span class="comment">// 4-digit pair</span></span><br><span class="line">  <span class="keyword">let</span> d0 = stack.pop() | <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> d1 = (stack.pop() | <span class="number">0</span>) * <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">let</span> d2 = (stack.pop() | <span class="number">0</span>) * <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">let</span> d3 = (stack.pop() | <span class="number">0</span>) * <span class="number">8</span>;</span><br><span class="line">  <span class="keyword">let</span> D = d0 + d1 + d2 + d3;</span><br><span class="line">  temp.push(D &gt; <span class="number">9</span> ? letters[D % <span class="number">10</span>] : D);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = temp.reverse().join(<span class="string">''</span>); <span class="comment">// result = C9 (16)</span></span><br><span class="line">temp = <span class="built_in">parseInt</span>(result, <span class="number">16</span>); <span class="comment">// 201 (10)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Faster way in JavaScript</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'11001001'</span>, <span class="number">2</span>).toString(<span class="number">16</span>);</span><br></pre></td></tr></table></figure><h2 id="使用栈来计算普通数学表达式"><a href="# 使用栈来计算普通数学表达式" class="headerlink" title="使用栈来计算普通数学表达式"></a>使用栈来计算普通数学表达式 </h2><p> 计算<code>1 + (2 - 3 * 4.5) / 6</code>;</p><p>第一步，转换中缀表达式到后缀表达式（逆波兰表达式）。</p><figure class="highlight js"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Expected Result: 1 2 3 4.5 * - 6 / +</span></span><br><span class="line"><span class="keyword">let</span> input = <span class="string">'1 + (2 - 3 * 4.5) / 6'</span>;</span><br><span class="line">input = input.replace(<span class="regexp">/\s/g</span>, <span class="string">''</span>); <span class="comment">// 1+(2-3*4.5)/6</span></span><br><span class="line"><span class="keyword">let</span> numbers = input.split(<span class="regexp">/[\+\-\*\/\(\)]+/</span>);</span><br><span class="line"><span class="comment">// ["1","2","3","4.5","6"]</span></span><br><span class="line">numbers.forEach(<span class="function">(<span class="params">num, i</span>) =&gt;</span> &#123;</span><br><span class="line">  input = input.replace(num, i); <span class="comment">// 0+(1-2*3)/4</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> result = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">let</span> stack = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; input.length; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> value = input.charAt(i);</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/[\+\-\*\/\(\)]/</span>.test(value)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value === <span class="string">')'</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> symbol = stack.pop();</span><br><span class="line">      <span class="keyword">while</span> (symbol !== <span class="string">'('</span>) &#123;</span><br><span class="line">        result += <span class="string">`<span class="subst">$&#123;symbol&#125;</span> `</span>;</span><br><span class="line">        symbol = stack.pop();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (stack.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> symbol = stack.pop();</span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/\*\//</span>.test(symbol) &amp;&amp; !<span class="regexp">/\*\//</span>.test(value)) &#123;</span><br><span class="line">          result += <span class="string">`<span class="subst">$&#123;symbol&#125;</span> `</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          stack.push(symbol);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      stack.push(value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result += <span class="string">`<span class="subst">$&#123;numbers[value]&#125;</span> `</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (stack.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  result += <span class="string">`<span class="subst">$&#123;stack.pop()&#125;</span> `</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// result = "1 2 3 4.5 * - 6 / +"</span></span><br></pre></td></tr></table></figure><p>第二步，计算转换后的逆波兰表达式，最后输出结果。</p><figure class="highlight js"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Expected Result: -0.9166666666666667</span></span><br><span class="line"><span class="keyword">let</span> input = <span class="string">'1 2 3 4.5 * - 6 / +'</span>;</span><br><span class="line">input = input.trim().split(<span class="regexp">/\s/</span>);</span><br><span class="line"><span class="comment">// ["1", "2", "3", "4.5", "*", "-", "6", "/", "+"]</span></span><br><span class="line"><span class="keyword">let</span> stack = [];</span><br><span class="line"><span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; input.length; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> value = input[i];</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">isNaN</span>(value)) &#123;</span><br><span class="line">    <span class="keyword">let</span> backNum = stack.pop();</span><br><span class="line">    <span class="keyword">let</span> frontNum = stack.pop();</span><br><span class="line">    <span class="keyword">let</span> subResult = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (value === <span class="string">'+'</span>) &#123;</span><br><span class="line">      subResult = frontNum + backNum;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value === <span class="string">'-'</span>) &#123;</span><br><span class="line">      subResult = frontNum - backNum;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value === <span class="string">'*'</span>) &#123;</span><br><span class="line">      subResult = frontNum * backNum;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value === <span class="string">'/'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (backNum === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Divisor cannot be 0'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      subResult = frontNum / backNum;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Operator must be"+","-","*"or"/"'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (stack.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      stack.push(subResult);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result = subResult;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    stack.push(<span class="built_in">parseFloat</span>(value));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// result = -0.9166666666666667</span></span><br></pre></td></tr></table></figure><h1 id="队列 Queue"><a href="# 队列 Queue" class="headerlink" title="队列 Queue"></a>队列 Queue</h1><p>队列 Queue 是一种线性结构，也是线性表的一种具体形式。队列这种先进先出（First In First Out，FIFO）的应用也非常广泛，是只允许在一段进行插入操作，而在另一端进行删除操作的线性表，例如输入缓冲功能，任务顺序加载功能等等。</p><p>队列可以用顺序储存结构实现，但是跟栈相反，<strong>队列一般都用链式储存结构 </strong> 实现。</p><p>队列 Queue 的特性：</p><ul><li>队列的元素必须“后进先出”</li><li>队列的操作只能于线性表头尾进行</li></ul><p>队列 Queue 的操作：</p><ul><li>插入操作（Offer），进队列</li><li>删除操作（Poll），出队列</li></ul><p><img src="/gallery/data-structure-queue.png" alt="Queue Offer And Poll"></p><blockquote><p>本文参考：<br><a href="https://www.bilibili.com/video/BV1jW411K7yg" target="_blank" rel="noopener">【C 语言描述】《数据结构和算法》（小甲鱼）</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Stack </tag>
            
            <tag> Queue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构之线性表 List</title>
      <link href="/posts/6004/"/>
      <url>/posts/6004/</url>
      
        <content type="html"><![CDATA[<p>线性表（List），了解线性表的基础知识，认识一下线性表的种类。</p><a id="more"></a><h1 id="线性表 List"><a href="# 线性表 List" class="headerlink" title="线性表 List"></a>线性表 List</h1><p>线性表（List）：由另个或多个元素组成的有限序列。<strong>元素是有序的，可以被排列的 </strong>。在有序结构中，某个元素<code>ai</code> 前面的元素 <code>ai-1</code> 称为 <strong> 前驱元素 </strong>，后面的元素<code>ai+1</code> 称为 <strong> 后继元素</strong>。在 Java 语言中，数组（ArrayList）和链表（Linked List）都属于线性表。其中数组使用了顺序结构，而链表使用了链式结构。</p><p>线性表的数据对象集合为 <code>{a1,a2,...,an-1,an}</code>，每个元素的类型均为<code>DataType</code>。<strong> 数据元素之间的关系是一对一的关系。</strong>其中，除第一个元素 <code>a1</code> 外，每个元素有且只有一个直接前驱元素，除最后一个元素 <code>an</code> 外，每个元素有且只有一个直接后继元素。</p><h1 id="线性表伪代码"><a href="# 线性表伪代码" class="headerlink" title="线性表伪代码"></a>线性表伪代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ADT 线性表（List）</span><br><span class="line">Data</span><br><span class="line">  数据对象集合 &#123;a1,a2,...,an-1,an&#125;</span><br><span class="line">Operation</span><br><span class="line">  init(*L)：初始化空线性表 L</span><br><span class="line">  isEmpty(L)：判断线性表是否为空</span><br><span class="line">  clear(*L)：清空线性表</span><br><span class="line">  getElement(L,i,*e)：将线性表 L 中第 i 个元素返回给 e</span><br><span class="line">  elementAt(L,e)：线性表 L 中查找与 e 相等的元素，返回元素的位置</span><br><span class="line">  insert(*L,i,e)：线性表 L 中第 i 个位置插入新元素 e</span><br><span class="line">  delete(*L,i,*e)：删除线性表 L 中第 i 个位置元素，并返回该元素给 e</span><br><span class="line">  length(L)：返回线性表 L 的元数个数</span><br><span class="line">endADT</span><br></pre></td></tr></table></figure><h1 id="线性表的顺序存储结构"><a href="# 线性表的顺序存储结构" class="headerlink" title="线性表的顺序存储结构"></a>线性表的顺序存储结构 </h1><p> 线性表的顺序存储结构封装需要 3 个属性：</p><ul><li>存储空间初始位置，数组指针</li><li>线性表的最大长度，指存储空间总长度，初始化后不变</li><li>线性表的当前长度，指表中元素数量，大于等于 0，小于表的最大长度</li></ul><h2 id="顺序存储结构的地址计算方法"><a href="# 顺序存储结构的地址计算方法" class="headerlink" title="顺序存储结构的地址计算方法"></a>顺序存储结构的地址计算方法 </h2><p><strong> 注：<code>i</code>从“1”开始</strong></p><p>假设每个元素类型的 <code>DataType</code> 都需要占用 <code>c</code> 个储存单位（字节），那么线性表中第 <code>i+1</code> 个元素和第 <code>i</code> 个元素的存储位置的关系是（LOC 为获得存储位置的函数）：</p><p><code>LOC(ai+1) = LOC(ai) + c</code></p><p>所以找第 <code>i</code> 个元素 <code>ai</code> 的储存位置可以又线性表初始指针指向的 <code>a1</code> 推算出：</p><p><strong><code>LOC(ai) = LOC(a1) + (i-1) * c</code></strong></p><p>通过这个公式，计算出线性表中任意位置的地址，所用的时间都是相同的，那么他的存储时间性能就是 <code>O(1)</code>，<strong> 这种结构通常被称为随机存储结构。</strong></p><h1 id="线性表的链式存储结构"><a href="# 线性表的链式存储结构" class="headerlink" title="线性表的链式存储结构"></a>线性表的链式存储结构 </h1><p> 顺序存储结构最大的缺点，插入和删除需要移动大量元素，从而保持表中元素邻居的关系；链式存储结构通过携带后继元素的存储地址就解决了这个缺点。</p><p>链式存储结构的线性表中元素称为“存储映像”，也称为“节点（Node）”。每个节点都是由两部分组成：</p><ul><li>数据域：储存数据元素信息的域</li><li>指针域：存储直接后继元素地址的域</li></ul><h2 id="单链表"><a href="# 单链表" class="headerlink" title="单链表"></a>单链表 </h2><p><code>n</code> 个节点链接成一个链表，即为线性表 <code>(a1,a2,...,an-1,an)</code> 的链式存储结构。因为此链表的每个节点中只包含一个指针域，所以叫做单链表。</p><p><img src="/gallery/data-structure-linked-list-normal.png" alt="单链表图示"></p><p>单链表必须有一个头部加上 0 到多个节点。头指针是链表指向第一个节点的指针，如果链表有头结点，则头指针指向头结点。头结点携带第一个元素的节点指针，放在第一个节点之前，其数据域一般无意义，但也可以存放链表的长度。头结点不是必须的，但是头结点可以放一些对列表有用的变量。</p><p>尾指针是指向单链表的最后一个节点的指针，这个指针不是必须的，但是尾指针有好处，比如需要在尾部插入新节点。</p><p><strong>若线性表需要频繁查找，很少进行插入和删除操作是，宜采用顺序存储结构。</strong></p><p><strong>若需要频繁插入和删除时，宜采用单链表结构。</strong></p><h2 id="静态链表"><a href="# 静态链表" class="headerlink" title="静态链表"></a>静态链表 </h2><p> 在内存中建立一个数组，在数组最大长度内的空间中再建立一个链表，这种链表就是静态链表。静态链表通过“游标（Cursor）”指向后继元素所处数组中的“下标（Index）”。下图为静态链表转普通链表，最大长度为<code>100</code>，第一个元素游标指向备用链表的头节点（既当前链表尾节点的游标，也是尾指针），最后一个元素游标指向当前链表头节点。</p><p><img src="/gallery/data-structure-linked-list-static-to-normal.png" alt="静态链表转普通链表"></p><ul><li>数组中第一个和最后一个元素不存放数据</li><li>未使用的数组元素被称为备用链表</li><li>数组第一个元素，即 <code>Index = 0</code> 的元素的游标（Cursor）存放备用链表的第一个节点的下标</li><li>数组最后一个元素，即 <code>Index = MAX_SIZE-1</code> 的元素的游标（Cursor）存放当前链表的第一个节点的下标</li><li>静态链表初始化时，<code>Index = 0</code>的元素的游标应从 <code>1</code> 开始，而 <code>Index = MAX_SIZE-1</code> 的元素的游标则是<code>0</code>，表示空链表</li></ul><h2 id="循环链表"><a href="# 循环链表" class="headerlink" title="循环链表"></a>循环链表 </h2><p> 在单链表中，如果不从头结点出发，就无法访问到全部节点。循环链表就解决了这个问题。只要有链表中某一节点的指针，就能跑完全部节点。当表为空时，头部后继指针指向头部本身。</p><p><strong>循环链表所用的方法就是把尾节点的空指针指向头节点，使单链表形成一个环，这种头尾相接的单链表被称为单循环链表，简称循环链表。</strong></p><p>原单链表判断尾节点用<code>node.next === null ?</code>，现在则是用<code>node.next === head ?</code>。</p><h2 id="双向链表"><a href="# 双向链表" class="headerlink" title="双向链表"></a>双向链表 </h2><p> 对比单链表，双向链表的节点有两个指针：前驱指针和后继指针。双向列表允许从尾部往回跑。当表为空时，头部前驱指针和后继指针都指向头部本身。</p><h1 id="找单链表中间的节点的方法"><a href="# 找单链表中间的节点的方法" class="headerlink" title="找单链表中间的节点的方法"></a>找单链表中间的节点的方法 </h1><p> 利用快慢指针原理：设置两个指针 <code>*search</code> 和<code>*middle</code>都指向单链表的头结点。其中 <code>*search</code> 的移动速度是 <code>*middle</code> 的 2 倍。当 <code>*search</code> 指向尾节点时，<code>*middle</code>正好就在中间。</p><p>在一个长度为 100 的单链表中，当 <code>*search</code> 指向第 100 个节点时，<code>*middle</code>指向第 50 个节点。</p><p>在一个长度为 101 的单链表中，当 <code>*search</code> 指向 102（即超出长度）时，<code>*middle</code>指向第 51 个节点，正好在中间。</p><h1 id="判断一个链表是否有环"><a href="# 判断一个链表是否有环" class="headerlink" title="判断一个链表是否有环"></a>判断一个链表是否有环 </h1><p> 方法一：设置两个指针 <code>*q</code> 和<code>*b</code>。<code>*q</code>一直在走的情况下，每遇到一个节点，<code>*b</code>就从新从头结点开始走。如果 <code>*q</code> 所在当前步数等于 <code>*b</code> 从头开始数的步数，则 <code>*q</code> 继续往前走一步，而 <code>*b</code> 从新走。如果 <code>*q</code> 所在当前步数不等于 <code>*b</code> 的从头开始数的步数，则存在环。这种方法可以找到环所在节点。</p><p>方法二：设置两个指针 <code>*q</code> 和<code>*b</code>都指向单链表的头结点。其中 <code>*q</code> 的移动速度是 <code>*b</code> 的 2 倍，若在某个时候<code>*q == *b</code>，则存在环。一般偶数量节点的单循环链表跑两次后<code>*q == *b</code>。</p><blockquote><p>本文参考：<br><a href="https://www.bilibili.com/video/BV1jW411K7yg" target="_blank" rel="noopener">【C 语言描述】《数据结构和算法》（小甲鱼）</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性表 </tag>
            
            <tag> List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法之基础</title>
      <link href="/posts/2915/"/>
      <url>/posts/2915/</url>
      
        <content type="html"><![CDATA[<p>算法基础，了解算法的基础知识，算法的种类，知道什么是好算法。</p><a id="more"></a><h1 id="算法特性"><a href="# 算法特性" class="headerlink" title="算法特性"></a>算法特性</h1><ul><li><strong>输入</strong>：可以有零个或多个参数</li><li><strong>输出</strong>：必须有一个或多个结果</li><li><strong>有穷性</strong>：算法必须会结束，没有无限循环</li><li><strong>确定性</strong>：有唯一结果</li><li><strong>可行性</strong>：算法每一步都能通过执行有限次数完成</li></ul><h1 id="算法设计要求"><a href="# 算法设计要求" class="headerlink" title="算法设计要求"></a>算法设计要求</h1><ul><li><strong>正确性</strong>：算法至少具有输入、输出和过程明确的加工处理，正确反映问题的需求，最后得到期望的答案<ul><li>算法程序没有语法错误</li><li>算法程序对于合法输入能产生期望的答案</li><li>算法程序对于非法输入能产生警告和提示</li><li>算法程序对于故意掉难得测试输入都能产生期望的结果</li></ul></li><li><strong>可读性</strong>：算法便于阅读、理解和交流</li><li><strong>健壮性</strong>：能够处理异常、崩溃或莫名其妙的结果</li><li><strong>高时间效率和低存储量</strong>：算法要考虑处理速度和内存用量</li></ul><h1 id="算法效率度量方法"><a href="# 算法效率度量方法" class="headerlink" title="算法效率度量方法"></a>算法效率度量方法</h1><ul><li>事后统计方法：通过执行多个输入测试，记录执行时间平均值</li><li>事前估算方法：通过统计方法对算法进行估算，涉及以下因素<ol><li>算法策略，<strong>例子使用公式或者循环等</strong></li><li>编译后的代码质量，<strong>基础操作的次数统计</strong></li><li>问题的输入规模，<strong>例子数值大小或元素数量等</strong></li><li>机器执行指令的速度，<strong>硬件性能</strong></li></ol></li></ul><p><strong>算法基础种类分别有：<code>1</code>、<code>n</code>、<code>n*n</code>。</strong></p><p>一般使用公式或瀑布式条件判断的算法策略属于 <code>1</code>；使用单个循环的属于<code>n</code>；使用嵌套循环的属于<code>n*n</code>。3 种算法中往往常数算法<code>1</code> 要优于 <code>n</code> 和<code>n*n</code>。给以下基础操作次数公式分类：</p><ul><li><code>1</code>：<code>3</code>、<code>5</code>、<code>9</code>等</li><li><code>n</code>：<code>n</code>、<code>n+1</code>、<code>2n+3</code>等</li><li><code>n*n</code>：<code>n^2</code>、<code>n^2+5</code>、<code>2n^3+1</code>等</li></ul><p><strong>一般判断算法好坏，更应该关注函数公式的主项：指数最高项。</strong><br>比如算法 <code>2n^2+n+3</code> 对比算法 <code>n^3+2n+1</code>，因为<code>2n^2</code> 指数低于 <code>n^3</code>，所以算法<code>2n^2+n+3</code> 优于算法<code>n^3+2n+1</code>。</p><h2 id="怎么分析一个算法的输入时间？"><a href="# 怎么分析一个算法的输入时间？" class="headerlink" title="怎么分析一个算法的输入时间？"></a>怎么分析一个算法的输入时间？</h2><ul><li>抽象算法：去除算法中循环的外包装、条件的判断、变量的声明、打印输出等操作</li><li>指令计数：统计关联的输入模式下基础操作的数量</li></ul><h2 id="求和 1-100 的算法例子分析"><a href="# 求和 1-100 的算法例子分析" class="headerlink" title="求和 1-100 的算法例子分析"></a>求和 1-100 的算法例子分析 </h2><p> 以下 <em> 算法一 </em>，算法策略使用<code> 循环 </code>，编译后的代码质量为<code>n</code> 次，问题的输入规模<code>100</code>，机器执行指令的速度取决于算法运行所在计算机。</p><figure class="highlight js"><figcaption><span>JavaScript 算法一</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>, i = <span class="number">1</span>, n = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">for</span> (; i &lt;= n; i++) &#123;</span><br><span class="line">  sum += i;                  <span class="comment">// 执行 n 次</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下 <em> 算法二 </em>，算法策略使用<code> 公式 </code>，编译后的代码质量为<code>1</code> 次，问题的输入规模<code>100</code>，机器执行指令的速度取决于算法运行所在计算机。</p><figure class="highlight js"><figcaption><span>JavaScript 算法二</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>, i = <span class="number">1</span>, n = <span class="number">100</span>;</span><br><span class="line">sum = (i + n) * n  / <span class="number">2</span>;      <span class="comment">// 执行 1 次</span></span><br></pre></td></tr></table></figure><p>对比以上算法，它们的输入规模都是 <code>100</code>，在同一计算机运行的情况下，<strong> 算法一 </strong> 的基础操作次数受输入规模的影响，造成工作量超出 <strong> 算法二 </strong>，<strong> 所以算法二效率更高</strong>。</p><h2 id="求和 3x3 表格内数值的例子分析"><a href="# 求和 3x3 表格内数值的例子分析" class="headerlink" title="求和 3x3 表格内数值的例子分析"></a>求和 3x3 表格内数值的例子分析 </h2><p> 以下 <em> 表格遍历例子 </em>，算法策略使用<code> 嵌套的循环 </code>，编译后的代码质量为<code>n^2</code> 次，问题的输入规模<code>3x3</code>，机器执行指令的速度取决于算法运行所在计算机。</p><figure class="highlight js"><figcaption><span>JavaScript 表格遍历求和例子</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>, </span><br><span class="line">    table = [</span><br><span class="line">      [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">      [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">      [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>],</span><br><span class="line">    ];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= table.length; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt;= table[i].length; j++) &#123;</span><br><span class="line">    sum += table[i][j];      <span class="comment">// 执行 n^2 次</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上算法，它根据表格的大小，基础操作的数量是以指数上升的，<strong>所以 <code>3x3</code> 的表格内数值总和计算一共有基础操作 <code>3^2</code> 等于 9 次</strong>。</p><h1 id="用大 O 记法表示算法时间复杂度"><a href="# 用大 O 记法表示算法时间复杂度" class="headerlink" title="用大 O 记法表示算法时间复杂度"></a>用大 O 记法表示算法时间复杂度 </h1><p> 复杂度分为：<strong>时间复杂度 </strong> 或<strong>空间复杂度 </strong><br><strong> 一般计算“复杂度”是指“时间复杂度”，而不是空间复杂度，目前主流还是时间复杂度，不求用内存换取时间。</strong></p><p><strong>T(n) = O(f(n))</strong>，<code>f(n)</code>为算法的函数或入口，随着输入规模 <code>n</code> 的增长，<code>T(n)</code>增长最慢的算法为最优算法。因为以下原因：</p><p><strong>基础操作数量 = 时间</strong></p><p>所以当 <code>n</code> 翻倍时，<em>基础操作数量 </em> 增长越少，花费的 <em> 时间 </em> 越少。</p><p>上面用到的三个求和算法例子，如果用大 O 表示算法的时间复杂度分别为<code>O(1)</code>、<code>O(n)</code>、<code>O(n^2)</code>。</p><p><strong>大 O 记法表示时间的增长率</strong></p><ul><li><code>O(1)</code>：增长率不变</li><li><code>O(n)</code>：增长率倍数增长</li><li><code>O(n^2)</code>：增长率指数增长</li></ul><h2 id="推导大 O 阶方法"><a href="# 推导大 O 阶方法" class="headerlink" title="推导大 O 阶方法"></a>推导大 O 阶方法 </h2><p> 用一下方法来推导 <code>5</code>、<code>2n+3</code>、<code>n(n+1)/2</code> 和<code>O(logn)</code>的大 O 阶：</p><ol><li>用常数 1 取代所有加法常数</li><li>只保留最高阶项</li><li>最高阶项不是 1 的话，去除这个项相乘的常数</li></ol><p><code>5</code> =&gt; <code>O(1)</code>，<br><code>2n+3</code> =&gt; <code>O(n)</code>，<br><code>n(n+1)/2</code> =&gt; <code>O(n^2)</code></p><p>一面这个例子的话就是<code>O(logn)</code>：</p><figure class="highlight js"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">1</span>, n = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">  i *= <span class="number">2</span>; <span class="comment">// 2^x = n，那么 x = log(2)n，x 为循环次数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常见的时间复杂度"><a href="# 常见的时间复杂度" class="headerlink" title="常见的时间复杂度"></a>常见的时间复杂度</h2><table><thead><tr><th align="center">例子</th><th align="center">时间复杂度</th><th align="center">术语</th></tr></thead><tbody><tr><td align="center">5</td><td align="center">O(1)</td><td align="center">常数阶</td></tr><tr><td align="center">3n+4</td><td align="center">O(n)</td><td align="center">线性阶</td></tr><tr><td align="center">3n^2+4n+5</td><td align="center">O(n^2)</td><td align="center">平方阶</td></tr><tr><td align="center">3log(2)n+4</td><td align="center">O(logn)</td><td align="center">对数阶</td></tr><tr><td align="center">2n+3nlog(2)n+14</td><td align="center">O(nlogn)</td><td align="center">nlogn 阶</td></tr><tr><td align="center">n^3+2n^2+4n+6</td><td align="center">O(n^3)</td><td align="center">立方阶</td></tr><tr><td align="center">2^n</td><td align="center">O(2^n)</td><td align="center">指数阶</td></tr></tbody></table><p>时间复杂度对比：<br><strong><code>O(1)</code> &lt; <code>O(logn)</code> &lt; <code>O(n)</code> &lt; <code>O(nlogn)</code> &lt; <code>O(n^2)</code> &lt; <code>O(n^3)</code> &lt; <code>O(2^n)</code> &lt; <code>O(n!)</code> &lt; <code>O(n^n)</code></strong></p><blockquote><p>本文参考：<br><a href="https://www.bilibili.com/video/BV1jW411K7yg" target="_blank" rel="noopener">【C 语言描述】《数据结构和算法》（小甲鱼）</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> Big O </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构之基础</title>
      <link href="/posts/46208/"/>
      <url>/posts/46208/</url>
      
        <content type="html"><![CDATA[<p>数据结构基础，了解数据结构的分类，认识一下抽象数据类。</p><a id="more"></a><h1 id="顺序结构"><a href="# 顺序结构" class="headerlink" title="顺序结构"></a>顺序结构 </h1><p><strong> 内存中元素紧挨在一起的数据结构为顺序结构 </strong>。在 C 语言中，声明一个整数结构类型长度为<code>5</code> 的数组时，内存中会留出 5 个整数长度的连续空间用于存储数组。实际上，数组的指针可以说是指向在数组中的第一个元素。当要修改第 4 个元素时，计算机是找到了数组指针地址，跳跃 3 个整数长度的距离，从而找到第 4 个元素的位置。</p><h1 id="链式结构"><a href="# 链式结构" class="headerlink" title="链式结构"></a>链式结构 </h1><p><strong> 内存中元素可连续也可不连续，通过指针寻找和连接元素的数据结构为链式结构 </strong>。在 Java 语言中，链表（Linked List）和树（Tree）都属于链式结构。他们属于抽象的结构类型，类型所包含的元素被称为节点（Node）。链表节点中的值可以为整数类、浮点类、字符串等，包括抽象数据类；但链表节点中还会包含有节点的一个后继元素指针。树节点对比链表节点的不同在于树节点中可以包含有多个后继元素指针。总结起来就是<strong> 链式结构节点在内存中连续摆放不是必须的</strong>，当计算机查找某个节点时，会走遍目标节点前的所有节点，从而顺着第一个节点的指针找到目标指针。</p><h1 id="比较顺序结构和链式结构"><a href="# 比较顺序结构和链式结构" class="headerlink" title="比较顺序结构和链式结构"></a>比较顺序结构和链式结构</h1><p><img src="/gallery/data-structure-random-linked-ram.png" alt="顺序结构和链式结构在内存中的不同"></p><ul><li>顺序结构在内存中有固定最大长度，而链式结构在内存中没有，所以在流动数据多的情况下，链式结构对空间利用更灵活。</li><li>顺序结构在内存中是元素之间是连续的，而链式结构在内存中很可能是不连续的，所以在查找元素时，通过地址计算公式查找，顺序结构的效率更高。</li><li>在首部添加元素或删除中间某个元素的情况下，链式结构的效率会更高，因为对比顺序结构，链式结构不需要重新排列。</li><li>顺序结构最大长度难以确定的情况下，会产生太多的储存空间“碎片”，而链式结构原本就是“碎片化”的。</li></ul><h1 id="C 语言数据类型"><a href="#C 语言数据类型" class="headerlink" title="C 语言数据类型"></a>C 语言数据类型 </h1><p> 原子 / 基本类型：short, int, long, float, double, char<br>结构 / 构造类型：数组, struct, union, enum<br>其他：指针，空（void）</p><h1 id="抽象数据类型（Abstract-Data-Type）"><a href="# 抽象数据类型（Abstract-Data-Type）" class="headerlink" title="抽象数据类型（Abstract Data Type）"></a>抽象数据类型（Abstract Data Type）</h1><p>区别于基本数据类型，基本数据类型有设定数据占用空间的极限、数据表示的方式和内存中结构的特性；抽象数据类型基于基本数据类型形成更复杂的数据类型，例如链表（Linked List）和树（Tree）都属于抽象数据类。颜色（Color）、坐标（Point）等结构类也都属于抽象数据类。</p><blockquote><p>所谓抽象数据类型就是把数据类型和相关操作捆绑在一起。</p></blockquote><p>Color 抽象数据类:<br>由 Red、Green 和 Blue，3 个范围为 0-255 的整数值表示颜色范围，加上一个范围为 0-1 的浮点型 Alpha 数值表示透明度。</p><p>Point 抽象数据类:<br>由 x、y 和 z，3 个整数值表示三维空间中的坐标。</p><h1 id="抽象数据类型伪代码"><a href="# 抽象数据类型伪代码" class="headerlink" title="抽象数据类型伪代码"></a>抽象数据类型伪代码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ADT 抽象数据类型名</span><br><span class="line">Data</span><br><span class="line">  数据元素之间逻辑关系的定义</span><br><span class="line">Operation</span><br><span class="line">  操作</span><br><span class="line">endADT</span><br></pre></td></tr></table></figure><blockquote><p>本文参考：<br><a href="https://www.bilibili.com/video/BV1jW411K7yg" target="_blank" rel="noopener">【C 语言描述】《数据结构和算法》（小甲鱼）</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 抽象数据类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP 是什么？</title>
      <link href="/posts/8716/"/>
      <url>/posts/8716/</url>
      
        <content type="html"><![CDATA[<p>HTTP 是客户端和服务端之间互动需要准守的其中一种协议。在日常上网过程中，用户通过浏览器浏览目标网站的操作，看起来就是进入目标网站的门户之后，想看哪里就点哪里，但是实际上客户端和服务端之间的数据互动都是通过一套标准来执行的。用旧时代的眼光来看就是网络节点两边统一使用了莫斯代码，所以两边之间的交流就没有了障碍。</p><a id="more"></a><p><strong> 先来个更好的文章做参考：<a href="//www.cnblogs.com/an-wen/p/11180076.html" target="_blank" rel="noopener">HTTP 协议超级详解 </a></strong></p><h1 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP/1.1"></a>HTTP/1.1</h1><p>HTTP 属于 TCP/IP 中的“顶层”应用层，这说明 HTTP 的包装是数据出发前的第一步。在这里不谈 TCP 相关连接过程，但是 HTTP 请求 / 响应都是要在连接之后的事；想看的话，可以看 <a href="//www.cnblogs.com/kaleidoscope/p/9701117.html" target="_blank" rel="noopener">TCP 三次握手详解及释放连接过程 </a>。基本上 HTTP 就是请求和响应的模式，在服务方想理你客户方的情况下，你想要什么，她都会回应你。</p><p>HTTP 请求方法：</p><ul><li>GET，一般请求的数据都是不需要处理的数据 </li><li>HEAD，获取 metadata，打个比方就是电脑上文件右键属性 </li><li>POST，一般请求的数据都是需要处理的数据 </li><li>PUT，像数据库的 INSERT</li><li>DELETE，像数据库的 DELETE</li><li>PATCH，像数据库的 UPDATE</li><li> 还有 TRACE、OPTIONS、CONNECT</li></ul><p>HTTP 状态码：</p><ul><li>100 及以上，普通的信息代码 </li><li>200 及以上，请求成功被处理 </li><li>300 及以上，请求被重定向了 </li><li>400 及以上，这是客户方的错 </li><li>500 及以上，这是服务方的错 </li></ul><h2 id="HTTP 请求 - 响应报文结构"><a href="#HTTP 请求 - 响应报文结构" class="headerlink" title="HTTP 请求 / 响应报文结构"></a>HTTP 请求 / 响应报文结构 </h2><p><img src="/gallery/http-request-format.png" alt="HTTP 请求报文结构"><em>Image from: <a href="//www.cnblogs.com/an-wen/p/11180076.html" target="_blank" rel="noopener">HTTP 协议超级详解 </a></em></p><p><img src="/gallery/http-request-example.jpg" alt="HTTP 请求报文例子"><em>Image from: <a href="//www.cnblogs.com/an-wen/p/11180076.html" target="_blank" rel="noopener">HTTP 协议超级详解 </a></em></p><p><img src="/gallery/http-response-format.png" alt="HTTP 响应报文结构"><em>Image from: <a href="//www.cnblogs.com/an-wen/p/11180076.html" target="_blank" rel="noopener">HTTP 协议超级详解 </a></em></p><p><img src="/gallery/http-response-example.jpg" alt="HTTP 响应报文例子"><em>Image from: <a href="//www.cnblogs.com/an-wen/p/11180076.html" target="_blank" rel="noopener">HTTP 协议超级详解 </a></em></p><h2 id="比较 HTTP-1-1 和 HTTP-2"><a href="# 比较 HTTP-1-1 和 HTTP-2" class="headerlink" title="比较 HTTP/1.1 和 HTTP/2"></a> 比较 HTTP/1.1 和 HTTP/2</h2><ul><li>HTTP/2 在一次 TCP 连接中可以同时发送多个请求，多行程减少了连接次数和响应的等待时间 </li><li>HTTP/2 压缩头部信息，包裹更小，运输更方便 </li><li>HTTP/2 使用二进制协议，不仅节省了不少分隔符和封箱胶带，还可以分成小份包装以数据流形式发送 </li><li>HTTP/2 允许服务端推送，一次请求把相关依赖的脚本也给客户端一起发来，很人性化 </li></ul><h1 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h1><p> 在 HTTP 包装外再来个 SSL/TLS 加密包装，HTTPS 有以下特点：</p><ol><li> 内容加密，传输过程中使用的密文 </li><li> 验证身份，找到对的服务端 </li><li> 保护数据完整性，防止传输过程中被动手脚 </li></ol><p> 基本上传输中的数据不易被动手脚。</p><p><strong><em> 更多可以百度 HTTP、HTTPS、TCP 连接等。</em></strong></p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> HTTPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP/IP 是什么？</title>
      <link href="/posts/4785/"/>
      <url>/posts/4785/</url>
      
        <content type="html"><![CDATA[<p><strong>本文大半内容都不对，弃了弃了~</strong></p><p>自计算机和互联网出现，大多数计算机都被用于上网、发邮件或者只是通过网路使用一下网络共享打印机。计算机网络 <a href="通过软硬件技术支持允许多台计算机之间交流和共享资源">^1</a> 可以连接各种功能不一样的电子设备，例如笔记本电脑、平板电脑、智能手机、服务器、打印机、扫描仪、路由器等设备。如果说以上设备连上网络后都算是“传统”节点，那在现在的物联网时代，各种计算机新品种就可以算作“非传统”节点了吧，毕竟现在能连网的设备真的是五花八门。再说征服王“互联网”现在真的可以说已经征服世界的情况下，计算机网络类型都可以分成 5 种：</p><ul><li>PAN - 个人网络，一台电脑配打印机等设备</li><li>LAN - 局域网，一个路由器下的网络</li><li>WLAN - 无线局域网，一个无线路由器信号覆盖下的网络</li><li>MAN - 都市网，一个城市的网络</li><li>WAN - 广域网，一个省、国家或整个世界下的网络，比如互联网</li></ul><p>在这么广阔的网络下，如果节点之间通讯只靠一个“节点 ID”作为坐标来互动，那互动时所传输的数据恐怕是要迷路很久甚至有可能累死在路上。<strong>TCP/IP</strong><a href="目前主流的网络相关协议集合，包括应用层、传输层、网络层和网络接口层">^2</a>就包含了网络相关的标准规范。这个协议集合里的 IP 部分就很好的为迷路的数据指明了方向。</p><a id="more"></a><p><strong>先来个更好的文章做参考：<a href="//developer.51cto.com/art/201906/597961.htm" target="_blank" rel="noopener">太厉害了，终于有人能把 TCP/IP 协议讲的明明白白了！</a>，<a href="//tool.oschina.net/commons?type=7" target="_blank" rel="noopener">TCP/UDP 常见端口参考</a></strong></p><p>网络上两个节点之间通讯需要 3 样东西来指路：</p><ul><li>节点在网络上的地址（IP 地址）</li><li>节点的名称（MAC 地址）</li><li>节点里应用或服务接收数据的端口（Port 端口）</li></ul><h1 id="TCP-IP 协议全家桶"><a href="#TCP-IP 协议全家桶" class="headerlink" title="TCP/IP 协议全家桶"></a>TCP/IP 协议全家桶 </h1><p> 全家桶包含 ARP, BGP, DHCP, DNS, FTP, HTTP, ICMP, IGMP, IP, TCP, Telnet, TFTP, UDP, WWW 等。<br>节点上的 TCP/IP 栈，需跟随所运行的网络应用的要求，从全家桶中选择合适的协议；不同的节点有可能会使用不一样的 TCP/IP 栈。</p><h2 id="网络体系结构 OSI 七层模型"><a href="# 网络体系结构 OSI 七层模型" class="headerlink" title="网络体系结构 OSI 七层模型"></a>网络体系结构 OSI 七层模型</h2><table><thead><tr><th align="right"></th><th align="center">名称</th><th align="center">功能</th><th align="center">TCP/IP 协议族</th></tr></thead><tbody><tr><td align="right">7</td><td align="center">应用层(Applicaiton)</td><td align="center">终端用户的接口支持：文件传输，电子邮件，文件服务，虚拟终端</td><td align="center">TFTP, HTTP, SNMP, FTP, SMTP, DNS, Telnet</td></tr><tr><td align="right">6</td><td align="center">表示层(Presentation)</td><td align="center">数据格式化，代码转换，数据加密</td><td align="center">N/A</td></tr><tr><td align="right">5</td><td align="center">会话层(Session)</td><td align="center">连接管理：解除或建立与别的节点的联系</td><td align="center">N/A</td></tr><tr><td align="right">4</td><td align="center">传输层(Transport)</td><td align="center">端对端传输管理，提供端对端的接口</td><td align="center">TCP, UDP</td></tr><tr><td align="right">3</td><td align="center">网络层(Network)</td><td align="center">端对端路由，为数据包选择路由</td><td align="center">IP, ICMP, RIP, OSPF, BGP, IGMP</td></tr><tr><td align="right">2</td><td align="center">数据链路层(Data Link)</td><td align="center">网络接入和架构管理，传输有地址的帧以及错误检测功能</td><td align="center">SLIP, CSLIP, PPP, ARP, RARP, MTU</td></tr><tr><td align="right">1</td><td align="center">物理层(Physical)</td><td align="center">比特流生成和接收，以二进制数据形式在物理媒体上传输数据</td><td align="center">ISO2110, IEEE802, IEEE802.2</td></tr></tbody></table><h1 id="IP 协议"><a href="#IP 协议" class="headerlink" title="IP 协议"></a>IP 协议</h1><p>IP 协议理论上让每个网络不管大小都有一个唯一的 IP 地址（或称作“节点地址”），但事实上不是每个网络（小到一台电脑配一个打印机）都能独享世界唯一 IP 地址。讨论“不能独享世界唯一 IP 地址的情况下，数据到底怎么就不会迷路了？”的问题之前，我们要先认识 IP 地址的格式。</p><h2 id="IPv4 格式"><a href="#IPv4 格式" class="headerlink" title="IPv4 格式"></a>IPv4 格式</h2><p>IPv4 使用 32-bit 节点地址，分成 4 个 8-bit 部分，例如：</p><p><code>01110000.11011110.11100110.00001111</code></p><p>使用十进制的眼光来看这个节点地址就会变成这样：</p><p><code>112.222.230.15</code></p><p>每一个 8-bit 部分的最大值是 255。<br>一个 IP 地址包含有两组信息：网络 ID 和节点 ID。</p><p>网络 ID 分为 3 类：</p><ul><li>A 类<ul><li>IP 地址范围：1.0.0.0 ~ 126.255.255.255</li><li>A 类网络 ID 为第 1 个 8-bit 部分</li><li>例子：<code>112.222.230.15</code>属于 A 类，网络 ID 为<code>112</code>，节点 ID 为<code>222.230.15</code></li></ul></li><li>B 类<ul><li>IP 地址范围：128.0.0.0 ~ 191.255.255.255</li><li>B 类网络 ID 为第 1-2 个 8-bit 部分</li><li>例子：<code>142.112.1.70</code>属于 B 类，网络 ID 为<code>142.112</code>，节点 ID 为<code>1.70</code></li></ul></li><li>C 类<ul><li>IP 地址范围：192.0.0.0 ~ 223.255.255.255</li><li>C 类网络 ID 为第 1-3 个 8-bit 部分</li><li>例子：<code>192.168.1.1</code>属于 C 类，网络 ID 为 <code>192.168.1</code>，节点 ID 为<code>1</code><br> 其中以 127 开头的 IP 地址为“回环地址”，数据信息的发送者发出的数据流会原样送回发送者。<br>网络 ID 越大，处于该网络下的主机或节点越少。一般家庭用的路由器网络 ID 为 <code>192.168.1</code> 的情况下最多只能连接 254 个设备。</li></ul></li></ul><h2 id="IPv6 格式"><a href="#IPv6 格式" class="headerlink" title="IPv6 格式"></a>IPv6 格式</h2><p>IPv6 使用 128-bit 节点地址，分成 8 个 4 位数的八进制 16-bit 部分，例如：</p><p><code>2001:0000:5723:0000:0000:D14E:DBCA:0764</code></p><p>也可以缩写成这样：</p><p><code>2001:0:5723::D14E:DBCA:764</code></p><p>其他例子：</p><p><code>2001:0DA8:0000:0000:0001:0000:0000:0001</code> =&gt; <code>2001:DA8::1:0:0:1</code> OR <code>2001:DA8:0:0:1::1</code><br><code>0:0:0:0:0:0:0:1</code> =&gt; <code>::1</code><br><code>0:0:0:0:0:0:0:0</code> =&gt; <code>::</code></p><p>开头 64-bit 包含了网络和子网络的地址，后面 64-bit 是接口 ID。因为 IPv6 地址是直接赋予接口的，所以一个主机可以有多个 IPv6 地址对应不同的网络连接。下图拆开开头 64-bit 网络地址：<br><img src="/gallery/tcp-ip-ipv6-prefix.jpg" alt="IPv6 Prefix"></p><h2 id="路由器"><a href="# 路由器" class="headerlink" title="路由器"></a>路由器 </h2><p> 路由器是能连接多个网络的设备。它们决定了数据的去向，但它们一般都不是数据的最终接收者。数据在传输过程中有可能经过多个跳板<a href="数据在传输过程中经过的路由器">^3</a>，一般这些数据跳的次数过多且还没到目的地的话就会累死在路上，造成的结果就是发送者得不到回应、响应超时或者收到路由甲回应的死亡信息。</p><p>一个 ID 为 <code>142.222</code> 的网络例子：<br><img src="/gallery/tcp-ip-router-network.jpg" alt="Network 142.222.x.x"><br>在这个网络中，所有的主机或节点都是必须要向路由器 <code>142.222.9.255</code> 发送他们的数据，这样数据才可以在这个网络中畅行或者从这个网络发出到更外面的网络；所以在这里路由器 <code>142.222.9.255</code> 被称为是默认网关。</p><p>假如在以上网络中主机 <code>142.222.12.27</code> 要发送数据到服务器<code>112.111.72.56</code>，数据会先到路由器<code>142.222.9.255</code>，路由器会通过路由表查找数据的下个传送目标（随便一提，需要解析域名的情况下，找到一个 IP 记录丰富的 DNS 也能让你的数据少跳跳板，数据极低概率会累死在路上）。</p><p>假如在以上 B 类网络基础上存在 <strong> 子网络 </strong>：<br><img src="/gallery/tcp-ip-router-subnet.jpg" alt="Network 142.222.x.x with subnet"><br> 在子网络中主机 <code>142.222.10.2</code> 要发送数据到服务器 <code>142.123.32.14</code>，数据会先到路由器<code>142.222.10.255</code>，再到外面网络的路由器<code>142.222.255.255</code>，再到更外面网络的路由器<code>142.255.255.255</code>；找到<code>142.255.255.255</code> 的下级 <code>142.123.255.255</code>，再到服务器<code>142.123.32.14</code>。当然，如果网络<code>142.123</code> 底下也有子网络的话，就要通过网关<code>142.123.32.255</code>，之后才是服务器<code>142.123.32.14</code>。</p><h2 id="MAC 地址"><a href="#MAC 地址" class="headerlink" title="MAC 地址"></a>MAC 地址</h2><p>MAC 地址一般说的就是网卡生产出来自带的 12 个十六进制数的 ID，当然也可以通过软件生成一个随机的 MAC 地址，只要主机所在的网络路由器上的 ARP 表上没有就行。它能够在一个网络下确认主机发送者或接收者的身份。因为 MAC 地址都是厂家定的，对比 IP 地址，MAC 地址就可以有唯一标识了，甚至一人手上说不定还能独享多个“唯一”。MAC 地址例子如下：</p><p><code>00-0B-DB-45-A4-CC</code></p><p>前 6 个数代表制造商：<code>00-0B-DB</code><br>后 6 个数为唯一编号：<code>45-A4-CC</code></p><h2 id="ARP 协议"><a href="#ARP 协议" class="headerlink" title="ARP 协议"></a>ARP 协议</h2><p>ARP 协议让路由器记录下哪个 IP 地址对应哪个 MAC 地址。因为 IP 地址多数为动态，一个设备说不定某天就移民了，所以路由器一般都有一个 ARP 表记录和分配 IP 地址给底下的子民；要是有的子民刚移民过来没有记录在案，在有数据传送过来路由找不到人的情况下会发广播，以这样的操作令底下子民回应，之后强制记录在案。</p><p><strong><em>更多可以百度 TCP/IP 全家桶各种协议，比较重要的还有数据包结构、DHCP<a href="为网关节点管理下的主机进行动态 IP 地址的分配；有效防止人工操作的失误；有主机被迁移或更替的情况下能够自动更新配置">^4</a>和 DNS<a href="域名服务器能够帮助解析域名到对应 IP 地址">^5</a>。</em></strong></p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP/IP </tag>
            
            <tag> MAC </tag>
            
            <tag> IPv6 </tag>
            
            <tag> IPv4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gallery Post Not Supported</title>
      <link href="/posts/64366/"/>
      <url>/posts/64366/</url>
      
        <content type="html"><![CDATA[<p>Theme <a href="//github.com/jinyaoMa/hexo-theme-mustom" target="_blank" rel="noopener">Mustom</a> does NOT SUPPORT variable <code>photos</code> in front-matter.</p><a id="more"></a><p>GALLERY POST NOT SUPPORTTED!!!</p><p><img src="//raw.githubusercontent.com/hexojs/hexo-theme-unit-test/master/source/assets/wallpaper-2572384.jpg" alt="Widescreen wallpaper"><br><img src="//raw.githubusercontent.com/hexojs/hexo-theme-unit-test/master/source/assets/wallpaper-2311325.jpg" alt="Portrait photo"><br><img src="//raw.githubusercontent.com/hexojs/hexo-theme-unit-test/master/source/assets/wallpaper-878514.jpg" alt="Dual widescreen wallpaper"><br><img src="//placehold.it/350x150.jpg" alt="Small photo"></p><p>This post contains 4 photos:</p><ul><li>Widescreen wallpaper</li><li>Portrait photo</li><li>Dual widescreen wallpaper</li><li>Small photo</li></ul><p>All photos should be displayed properly.</p><p><em>From <a href="//wallbase.cc" target="_blank" rel="noopener">Wallbase.cc</a></em></p><blockquote><p>Original Post from <a href="//github.com/hexojs/hexo-theme-unit-test" target="_blank" rel="noopener">Hexo Theme Unit Test</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown Basic Syntax</title>
      <link href="/posts/26104/"/>
      <url>/posts/26104/</url>
      
        <content type="html"><![CDATA[<p>This post is originated from <a href="//gist.github.com/apackeer/4159268" target="_blank" rel="noopener">here</a> and is used for testing markdown style. This post contains nearly every markdown usage. Make sure all the markdown elements below show up correctly.</p><a id="more"></a><hr><h1 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># H1</span></span><br><span class="line"><span class="section">## H2</span></span><br><span class="line"><span class="section">### H3</span></span><br><span class="line"><span class="section">#### H4</span></span><br><span class="line"><span class="section">##### H5</span></span><br><span class="line"><span class="section">###### H6</span></span><br><span class="line"></span><br><span class="line">Alternatively, for H1 and H2, an underline-ish style:</span><br><span class="line"></span><br><span class="line">Alt-H1</span><br><span class="line">======</span><br><span class="line"></span><br><span class="line">Alt-H2</span><br><span class="line">------</span><br></pre></td></tr></table></figure><h1 id="H1"><a href="#H1" class="headerlink" title="H1"></a>H1</h1><h2 id="H2"><a href="#H2" class="headerlink" title="H2"></a>H2</h2><h3 id="H3"><a href="#H3" class="headerlink" title="H3"></a>H3</h3><h4 id="H4"><a href="#H4" class="headerlink" title="H4"></a>H4</h4><h5 id="H5"><a href="#H5" class="headerlink" title="H5"></a>H5</h5><h6 id="H6"><a href="#H6" class="headerlink" title="H6"></a>H6</h6><p>Alternatively, for H1 and H2, an underline-ish style:</p><h1 id="Alt-H1"><a href="#Alt-H1" class="headerlink" title="Alt-H1"></a>Alt-H1</h1><h2 id="Alt-H2"><a href="#Alt-H2" class="headerlink" title="Alt-H2"></a>Alt-H2</h2><h2 id="Emphasis"><a href="#Emphasis" class="headerlink" title="Emphasis"></a>Emphasis</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Emphasis, aka italics, with <span class="emphasis">*asterisks*</span> or <span class="emphasis">_underscores_</span>.</span><br><span class="line"></span><br><span class="line">Strong emphasis, aka bold, with <span class="strong">**asterisks**</span> or <span class="strong">__underscores__</span>.</span><br><span class="line"></span><br><span class="line">Combined emphasis with <span class="strong">**asterisks and _underscores_*</span>*.</span><br><span class="line"></span><br><span class="line">Strikethrough uses two tildes. ~~Scratch this.~~</span><br></pre></td></tr></table></figure><p>Emphasis, aka italics, with <em>asterisks</em> or <em>underscores</em>.</p><p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p><p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p><p>Strikethrough uses two tildes. <del>Scratch this.</del></p><h2 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>First ordered list item</span><br><span class="line"><span class="bullet">2. </span>Another item</span><br><span class="line"><span class="bullet">  * </span>Unordered sub-list.</span><br><span class="line"><span class="bullet">1. </span>Actual numbers don't matter, just that it's a number</span><br><span class="line"><span class="bullet">  1. </span>Ordered sub-list</span><br><span class="line"><span class="bullet">4. </span>And another item.</span><br><span class="line"></span><br><span class="line">   You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).</span><br><span class="line"></span><br><span class="line">   To have a line break without a paragraph, you will need to use two trailing spaces.  </span><br><span class="line">   Note that this line is separate, but within the same paragraph.  </span><br><span class="line">   (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>Unordered list can use asterisks</span><br><span class="line"><span class="bullet">- </span>Or minuses</span><br><span class="line"><span class="bullet">+ </span>Or pluses</span><br><span class="line"><span class="bullet">- </span>Paragraph In unordered list</span><br><span class="line"></span><br><span class="line">  For example like this.</span><br><span class="line"></span><br><span class="line">Common Paragraph with some text.</span><br><span class="line">And more text.</span><br></pre></td></tr></table></figure><ol><li><p>First ordered list item</p></li><li><p>Another item</p><ul><li>Unordered sub-list.</li></ul></li><li><p>Actual numbers don’t matter, just that it’s a number</p><ol><li>Ordered sub-list</li></ol></li><li><p>And another item.</p><p>You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we’ll use three here to also align the raw Markdown).</p><p>To have a line break without a paragraph, you will need to use two trailing spaces.<br>Note that this line is separate, but within the same paragraph.<br>(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p></li></ol><ul><li>Unordered list can use asterisks</li></ul><ul><li>Or minuses</li></ul><ul><li>Or pluses</li></ul><ul><li><p>Paragraph In unordered list</p><p>For example like this.</p></li></ul><p>Common Paragraph with some text.<br>And more text.</p><h2 id="Inline-HTML"><a href="#Inline-HTML" class="headerlink" title="Inline HTML"></a>Inline HTML</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span>To reboot your computer, press <span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>ctrl<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>+<span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>alt<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>+<span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>del<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>.<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>To reboot your computer, press <kbd>ctrl</kbd>+<kbd>alt</kbd>+<kbd>del</kbd>.</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;dt&gt;Definition list&lt;/dt&gt;</span></span><br><span class="line"><span class="code">    &lt;dd&gt;Is something people use sometimes.&lt;/dd&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="code">    &lt;dt&gt;Markdown in HTML&lt;/dt&gt;</span></span><br><span class="line"><span class="code">    &lt;dd&gt;Does *not* work **very** well. Use HTML &lt;em&gt;tags&lt;/em&gt;.&lt;/dd&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span></span><br></pre></td></tr></table></figure><dl>    <dt>Definition list</dt>    <dd>Is something people use sometimes.</dd><pre><code>&lt;dt&gt;Markdown in HTML&lt;/dt&gt;&lt;dd&gt;Does *not* work **very** well. Use HTML &lt;em&gt;tags&lt;/em&gt;.&lt;/dd&gt;</code></pre></dl><h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">I'm an inline-style link</span>](<span class="link">//www.google.com</span>)</span><br><span class="line"></span><br><span class="line">[<span class="string">I'm an inline-style link with title</span>](<span class="link">//www.google.com "Google's Homepage"</span>)</span><br><span class="line"></span><br><span class="line">[<span class="string">I'm a reference-style link</span>][<span class="symbol">Arbitrary case-insensitive reference text</span>]</span><br><span class="line"></span><br><span class="line">[<span class="string">I'm a relative reference to a repository file</span>](<span class="link">../blob/master/LICENSE</span>)</span><br><span class="line"></span><br><span class="line">[<span class="string">You can use numbers for reference-style link definitions</span>][<span class="symbol">1</span>]</span><br><span class="line"></span><br><span class="line">Or leave it empty and use the [link text itself]</span><br><span class="line"></span><br><span class="line">Some text to show that the reference links can follow later.</span><br><span class="line"></span><br><span class="line">[<span class="symbol">arbitrary case-insensitive reference text</span>]: <span class="link">//hexo.io</span></span><br><span class="line">[<span class="symbol">1</span>]: <span class="link">//hexo.io/docs/</span></span><br><span class="line">[<span class="symbol">link text itself</span>]: <span class="link">//hexo.io/api/</span></span><br></pre></td></tr></table></figure><p><a href="//www.google.com" target="_blank" rel="noopener">I’m an inline-style link</a></p><p><a href="//www.google.com" target="_blank" rel="noopener" title="Google&#39;s Homepage">I’m an inline-style link with title</a></p><p><a href="//hexo.io" target="_blank" rel="noopener">I’m a reference-style link</a></p><p><a href="../blob/master/LICENSE">I’m a relative reference to a repository file</a></p><p><a href="//hexo.io/docs/" target="_blank" rel="noopener">You can use numbers for reference-style link definitions</a></p><p>Or leave it empty and use the <a href="//hexo.io/api/" target="_blank" rel="noopener">link text itself</a></p><p>Some text to show that the reference links can follow later.</p><h2 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">hover to see the title text:</span><br><span class="line"></span><br><span class="line">Inline-style:</span><br><span class="line"></span><br><span class="line">![<span class="string">alt text</span>](<span class="link">//hexo.io/icon/favicon-196x196.png "Logo Title Text 1"</span>)</span><br><span class="line"></span><br><span class="line">Reference-style:</span><br><span class="line">![<span class="string">alt text</span>][<span class="symbol">logo</span>]</span><br><span class="line"></span><br><span class="line">[<span class="symbol">logo</span>]: <span class="link">//hexo.io/icon/favicon-196x196.png "Logo Title Text 2"</span></span><br></pre></td></tr></table></figure><p>hover to see the title text:</p><p>Inline-style:</p><p><img src="//hexo.io/icon/favicon-196x196.png" alt="alt text" title="Logo Title Text 1"></p><p>Reference-style:<br><img src="//hexo.io/icon/favicon-196x196.png" alt="alt text" title="Logo Title Text 2"></p><h2 id="Code-and-Syntax-Highlighting"><a href="#Code-and-Syntax-Highlighting" class="headerlink" title="Code and Syntax Highlighting"></a>Code and Syntax Highlighting</h2><p>Inline <code>code</code> has <code>back-ticks around</code> it.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">"JavaScript syntax highlighting"</span>;</span><br><span class="line">alert(s);</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"Python syntax highlighting"</span></span><br><span class="line"><span class="keyword">print</span> s</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">No language indicated, so no syntax highlighting.</span><br><span class="line">But let&#39;s throw in a &lt;b&gt;tag&lt;&#x2F;b&gt;.</span><br></pre></td></tr></table></figure><h2 id="Tables"><a href="#Tables" class="headerlink" title="Tables"></a>Tables</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|                  | ASCII                           | HTML                          |</span><br><span class="line">| ---------------- | ------------------------------- | ----------------------------- |</span><br><span class="line">| Single backticks | <span class="code">`'Isn't this fun?'`</span>             |'Isn't this fun?'             |</span><br><span class="line">| Quotes           | <span class="code">`"Isn't this fun?"`</span>             |"Isn't this fun?"             |</span><br><span class="line">| Dashes           | <span class="code">`-- is en-dash, --- is em-dash`</span> | -- is en-dash, --- is em-dash |</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>ASCII</th><th>HTML</th></tr></thead><tbody><tr><td>Single backticks</td><td><code>&#39;Isn&#39;t this fun?&#39;</code></td><td>‘Isn’t this fun?’</td></tr><tr><td>Quotes</td><td><code>&quot;Isn&#39;t this fun?&quot;</code></td><td>“Isn’t this fun?”</td></tr><tr><td>Dashes</td><td><code>-- is en-dash, --- is em-dash</code></td><td>– is en-dash, — is em-dash</td></tr></tbody></table><p>Colons can be used to align columns.</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| Tables        |      Are      | Cool |</span><br><span class="line">| ------------- | :-----------: | ---: |</span><br><span class="line">| col 3 is      | right-aligned |      |</span><br><span class="line">| col 2 is      |   centered    |      |</span><br><span class="line">| zebra stripes |   are neat    |</span><br></pre></td></tr></table></figure><table><thead><tr><th>Tables</th><th align="center">Are</th><th align="right">Cool</th></tr></thead><tbody><tr><td>col 3 is</td><td align="center">right-aligned</td><td align="right"></td></tr><tr><td>col 2 is</td><td align="center">centered</td><td align="right"></td></tr><tr><td>zebra stripes</td><td align="center">are neat</td><td align="right"></td></tr></tbody></table><p>The outer pipes (|) are optional, and you don’t need to make the raw Markdown line up prettily. You can also use inline Markdown.</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| | Markdown | Less           | Pretty     |     |</span><br><span class="line">| | ------------- | --------------- | ---------- |------- |</span><br><span class="line">| | <span class="emphasis">*Still*</span>   | <span class="code">`renders`</span> | <span class="strong">**nicely**</span> | |</span><br><span class="line">| | 1               | 2                 | 3          |          |</span><br></pre></td></tr></table></figure><table><thead><tr><th>Markdown</th><th>Less</th><th>Pretty</th></tr></thead><tbody><tr><td><em>Still</em></td><td><code>renders</code></td><td><strong>nicely</strong></td></tr><tr><td>1</td><td>2</td><td>3</td></tr></tbody></table><h2 id="MathJax"><a href="#MathJax" class="headerlink" title="MathJax"></a>MathJax</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$$\sum_&#123;i&#x3D;0&#125;^n i^2 &#x3D; \frac&#123;(n^2+n)(2n+1)&#125;&#123;6&#125;$$</span><br><span class="line">$$</span><br><span class="line">f(n) &#x3D;</span><br><span class="line">\begin&#123;cases&#125;</span><br><span class="line">\frac&#123;n&#125;&#123;2&#125;,  &amp; \text&#123;if $n$ is even&#125; \\\\[2ex]</span><br><span class="line">3n+1, &amp; \text&#123;if $n$ is odd&#125;</span><br><span class="line">\end&#123;cases&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>$$\sum_{i=0}^n i^2 = \frac{(n^2+n)(2n+1)}{6}$$<br>$$<br>f(n) =<br>\begin{cases}<br>\frac{n}{2},  &amp; \text{if $n$ is even} \\[2ex]<br>3n+1, &amp; \text{if $n$ is odd}<br>\end{cases}<br>$$</p><blockquote><p>You can find more information about <strong>LaTeX</strong> mathematical expressions <a href="//math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">here</a>.</p></blockquote><h2 id="Blockquotes"><a href="#Blockquotes" class="headerlink" title="Blockquotes"></a>Blockquotes</h2><blockquote><p>Blockquotes are very handy in email to emulate reply text.<br>This line is part of the same quote.</p></blockquote><p>Quote break.</p><blockquote><p>This is a very long line that will still be quoted properly when it wraps. Oh boy let’s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can <em>put</em> <strong>Markdown</strong> into a blockquote.</p></blockquote><h2 id="Horizontal-Rule"><a href="#Horizontal-Rule" class="headerlink" title="Horizontal Rule"></a>Horizontal Rule</h2><p>Three or more…</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"></span><br><span class="line">Hyphens</span><br><span class="line"></span><br><span class="line"><span class="emphasis">***</span></span><br><span class="line"></span><br><span class="line">Asterisks</span><br><span class="line"></span><br><span class="line"><span class="emphasis">___</span></span><br><span class="line"></span><br><span class="line">Underscores</span><br></pre></td></tr></table></figure><hr><p>Hyphens</p><hr><p>Asterisks</p><hr><p>Underscores</p><h2 id="Line-Breaks"><a href="#Line-Breaks" class="headerlink" title="Line Breaks"></a>Line Breaks</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Here's a line for us to start with.</span><br><span class="line"></span><br><span class="line">This line is separated from the one above by two newlines, so it will be a <span class="emphasis">*separate paragraph*</span>.</span><br><span class="line"></span><br><span class="line">This line is also a separate paragraph, but...</span><br><span class="line">This line is only separated by a single newline, so it's a separate line in the <span class="emphasis">*same paragraph*</span>.</span><br></pre></td></tr></table></figure><p>Here’s a line for us to start with.</p><p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p><p>This line is also a separate paragraph, but…<br>This line is only separated by a single newline, so it’s a separate line in the <em>same paragraph</em>.</p><hr><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">This is a regular paragraph.</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;tr&gt;</span></span><br><span class="line"><span class="code">        &lt;td&gt;Foo&lt;/td&gt;</span></span><br><span class="line"><span class="code">    &lt;/tr&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">This is another regular paragraph.</span><br></pre></td></tr></table></figure><p>This is a regular paragraph.</p><table>    <tr>        <td>Foo</td>    </tr></table><p>This is another regular paragraph.</p><h2 id="Youtube-videos"><a href="#Youtube-videos" class="headerlink" title="Youtube videos"></a>Youtube videos</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"//www.youtube.com/watch?feature=player_embedded&amp;v=ARted4RniaU</span></span></span></span><br><span class="line"><span class="xml">" target="_blank"&gt;</span><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"//img.youtube.com/vi/ARted4RniaU/0.jpg"</span></span></span></span><br><span class="line"><span class="xml">alt="IMAGE ALT TEXT HERE" width="240" height="180" border="10" /&gt;</span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">Pure markdown version:</span><br><span class="line"></span><br><span class="line">[<span class="string">![IMAGE ALT TEXT HERE</span>](<span class="link">//img.youtube.com/vi/ARted4RniaU/0.jpg</span>)](<span class="link">//www.youtube.com/watch?v=ARted4RniaU</span>)</span><br></pre></td></tr></table></figure><p><a href="//www.youtube.com/watch?feature=player_embedded&v=ARted4RniaU" target="_blank"><img src="//img.youtube.com/vi/ARted4RniaU/0.jpg"alt="IMAGE ALT TEXT HERE" width="240" height="180" border="10" /></a></p><p>Pure markdown version:</p><p><a href="//www.youtube.com/watch?v=ARted4RniaU" target="_blank" rel="noopener"><img src="//img.youtube.com/vi/ARted4RniaU/0.jpg" alt="IMAGE ALT TEXT HERE"></a></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle SQL Basic Usage</title>
      <link href="/posts/2141/"/>
      <url>/posts/2141/</url>
      
        <content type="html"><![CDATA[<p>Oracle SQL 复习笔记（<del>进行中 </del> 放弃了…）</p><a id="more"></a><h1 id="笔记 -Cheat-Sheet"><a href="# 笔记 -Cheat-Sheet" class="headerlink" title="笔记 / Cheat Sheet"></a>笔记 / Cheat Sheet</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">concat(field/string, field/string, field/string...)</span><br><span class="line">length(field/string)</span><br><span class="line">round(number, [integer])</span><br><span class="line">in(string, string...)</span><br><span class="line">left(field/string, unsignedInteger) =&gt; js =&gt; field/string.substring(0, unsignedInteger)</span><br><span class="line"><span class="keyword">replace</span>(<span class="keyword">field</span>/<span class="keyword">string</span>, searchString, replacementString)</span><br><span class="line"><span class="keyword">where</span>, <span class="keyword">or</span>, <span class="keyword">xor</span>, <span class="keyword">and</span>, != (&lt;&gt;), <span class="keyword">like</span>, <span class="string">'_%'</span>, <span class="keyword">between</span> ?<span class="built_in">number</span> <span class="keyword">and</span> ?<span class="built_in">number</span> (<span class="keyword">both</span> <span class="built_in">number</span> inclusive), <span class="keyword">not</span> ?<span class="keyword">operator</span></span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">field</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> <span class="keyword">field</span> =&gt; non-repeated/<span class="keyword">unique</span> <span class="keyword">value</span></span><br><span class="line"><span class="comment">-- inline comment, a space after --</span></span><br><span class="line"><span class="comment">/* mutiple-line comment, a space at the very beginning and ending */</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line"><span class="keyword">all</span>(<span class="keyword">table</span>) =&gt; <span class="keyword">where</span> <span class="keyword">field</span> &gt; <span class="keyword">all</span>(<span class="keyword">select</span> <span class="keyword">num</span> <span class="keyword">from</span> nums) <span class="comment">-- find something with a field's number larger than all the num from nums</span></span><br><span class="line"><span class="keyword">count</span>(<span class="keyword">field</span>)</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">field</span></span><br><span class="line"><span class="keyword">having</span> <span class="comment">-- must only be used after'group by' that can use sum(), count(), etc.</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>旧版日记仿 markdown 编译代码</title>
      <link href="/posts/51385/"/>
      <url>/posts/51385/</url>
      
        <content type="html"><![CDATA[<p> 旧版日记仿 markdown 编译代码 </p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'hexo-fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myDiary = fs.readFileSync(<span class="string">'source/my.diary'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timeRangeAndDiaries = myDiary.split(<span class="regexp">/-&#123;9,&#125;/</span>); <span class="comment">// Split by /-&#123;9,&#125;/ so that having time ranges and diaries separated (trimmed).</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; timeRangeAndDiaries.length; i++) &#123;</span><br><span class="line">    timeRangeAndDiaries[i] = timeRangeAndDiaries[i].trim();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (timeRangeAndDiaries[i].startsWith(<span class="string">'#'</span>)) &#123; <span class="comment">// Edit time ranges to have h2 tags covered.</span></span><br><span class="line">        timeRangeAndDiaries[i] = <span class="string">'&lt;h2&gt;'</span> + timeRangeAndDiaries[i].replace(<span class="string">'#'</span>, <span class="string">''</span>).trim() + <span class="string">'&lt;/h2&gt;'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// switch \n to &#123;newline&#125;</span></span><br><span class="line">        timeRangeAndDiaries[i] = timeRangeAndDiaries[i].replace(<span class="regexp">/\n+/g</span>, <span class="string">'&#123;newline&#125;'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Search list tags in each diaries and save them into temps for parts of paragraph.</span></span><br><span class="line">        <span class="keyword">var</span> tempLists = timeRangeAndDiaries[i].match(<span class="regexp">/\[list\](.*?)\[\/list\]/g</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Search img tags in each diaries and save them into temps for parts of paragraph.</span></span><br><span class="line">        <span class="keyword">var</span> tempImgs = timeRangeAndDiaries[i].match(<span class="regexp">/\[img\](.*?)\[\/img\]/g</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Edit the saved temps for parts of paragraph to html tags and replace them to each diary (clear out newline characters).</span></span><br><span class="line">        <span class="keyword">if</span> (tempLists != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; tempLists.length; j++) &#123;</span><br><span class="line">                <span class="keyword">var</span> temp = tempLists[j].replace(<span class="regexp">/\[\/?list\]/g</span>, <span class="string">''</span>).split(<span class="string">'&#123;newline&#125;'</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; temp.length; k++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> trimmed = temp[k].replace(<span class="regexp">/(&#123;newline&#125;)+/g</span>, <span class="string">''</span>).trim();</span><br><span class="line">                    <span class="keyword">if</span> (trimmed == <span class="string">''</span>) &#123;</span><br><span class="line">                        temp[k] = <span class="string">''</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        temp[k] = <span class="string">'&lt;li&gt;'</span> + trimmed + <span class="string">'&lt;/li&gt;'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                tempLists[j] = <span class="string">'&lt;ul&gt;'</span> + temp.join(<span class="string">''</span>) + <span class="string">'&lt;/ul&gt;'</span>;</span><br><span class="line">                timeRangeAndDiaries[i] = timeRangeAndDiaries[i].replace(<span class="regexp">/\[list\](.*?)\[\/list\]/</span>, tempLists[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tempImgs != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; tempImgs.length; j++) &#123;</span><br><span class="line">                tempImgs[j] = <span class="string">'&lt;img src="'</span> + tempImgs[j].replace(<span class="regexp">/\[\/?img\]/g</span>, <span class="string">''</span>).replace(<span class="regexp">/(&#123;newline&#125;)+/g</span>, <span class="string">''</span>).trim() + <span class="string">'"&gt;'</span>;</span><br><span class="line">                timeRangeAndDiaries[i] = timeRangeAndDiaries[i].replace(<span class="regexp">/\[img\](.*?)\[\/img\]/</span>, tempImgs[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Split each diary by newline characters and save them into temps for paragraphing.</span></span><br><span class="line">        <span class="keyword">var</span> tempParagraphing = timeRangeAndDiaries[i].replace(<span class="regexp">/\n/g</span>, <span class="string">''</span>).split(<span class="string">'&#123;newline&#125;'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Edit the saved temps for paragraphing to html tags and replace them to each diary (clear out newline characters and empty lines).</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; tempParagraphing.length; j++) &#123;</span><br><span class="line">            <span class="keyword">var</span> trimmed = tempParagraphing[j].replace(<span class="regexp">/(&#123;newline&#125;)+/g</span>, <span class="string">''</span>).trim();</span><br><span class="line">            <span class="keyword">if</span> (trimmed == <span class="string">''</span>) &#123;</span><br><span class="line">                tempParagraphing[j] = <span class="string">''</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!trimmed.startsWith(<span class="string">'&lt;ul'</span>)) &#123;</span><br><span class="line">                tempParagraphing[j] = <span class="string">'&lt;p&gt;'</span> + trimmed + <span class="string">'&lt;/p&gt;'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> tempDiary = tempParagraphing.join(<span class="string">''</span>);</span><br><span class="line">        <span class="keyword">if</span> (tempDiary.trim() != <span class="string">''</span>) &#123;</span><br><span class="line">            timeRangeAndDiaries[i] = <span class="string">'&lt;div class="diary-item"&gt;'</span> + tempDiary + <span class="string">'&lt;/div&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Join these converted time ranges and diaries into string.</span></span><br><span class="line"><span class="keyword">var</span> html = timeRangeAndDiaries.join(<span class="string">''</span>);</span><br><span class="line"><span class="comment">// console.log(html)</span></span><br><span class="line">fs.writeFileSync(<span class="string">'public/diaries.html'</span>, html);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> old blog </tag>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网易云音乐歌单 JS 音乐播放器 JS 代码</title>
      <link href="/posts/12019/"/>
      <url>/posts/12019/</url>
      
        <content type="html"><![CDATA[<p><img src="/gallery/yaoplayer-0.jpg" alt="JS 音乐播放器截图"><br>网易云音乐歌单 JS 音乐播放器 JS 代码 <br> 感谢 <a href="//github.com/messoer/mess-api-doc" target="_blank" rel="noopener">MessAPI</a> 提供的网易云音乐 API<br>代码依赖 jQuery 和 fontawesome</p><a id="more"></a><h2 id="使用方法"><a href="# 使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="keyword">get</span>('https://v1.itooi.cn/netease/songList', &#123;</span><br><span class="line"><span class="string">'id'</span>: <span class="number">998389130</span> <span class="comment">// 此处歌单 ID</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">json</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (json.data != <span class="literal">undefined</span> &amp;&amp; json.data != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">json.data.tracks != <span class="literal">undefined</span> &amp;&amp; json.data.tracks != <span class="literal">null</span>) &#123;</span><br><span class="line">$(<span class="string">'body'</span>).append(<span class="keyword">new</span> YaoPlayer(<span class="string">'YaoPlayer'</span>, json.data.tracks.map(<span class="function"><span class="params">song</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">'name'</span>: song.name,</span><br><span class="line">        <span class="string">'singer'</span>: song.artists.map(<span class="function"><span class="params">artist</span> =&gt;</span> artist.name).join(<span class="string">','</span>),</span><br><span class="line">        <span class="string">'lrc'</span>: <span class="string">'Not found'</span>,</span><br><span class="line">        <span class="string">'pic'</span>: song.album.picUrl,</span><br><span class="line">        <span class="string">'url'</span>: <span class="string">`https://v1.itooi.cn/netease/url?id=<span class="subst">$&#123;song.id&#125;</span>&amp;quality=128`</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;)));</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="string">'json'</span>);</span><br></pre></td></tr></table></figure><h2 id="插件全代码"><a href="# 插件全代码" class="headerlink" title="插件全代码"></a>插件全代码</h2>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Plugin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 音乐播放器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试区 2048JS 代码</title>
      <link href="/posts/218/"/>
      <url>/posts/218/</url>
      
        <content type="html"><![CDATA[<p><img src="/gallery/yao2048-0.jpg" alt="测试区 Yao2048 截图"><br> 测试区 2048JS 代码 </p><a id="more"></a><h2 id="使用方法"><a href="# 使用方法" class="headerlink" title="使用方法"></a> 使用方法 </h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _2048 = <span class="keyword">new</span> Yao2048(<span class="built_in">document</span>.body);</span><br><span class="line">_2048.show();</span><br></pre></td></tr></table></figure><h2 id="JS 全代码"><a href="#JS 全代码" class="headerlink" title="JS 全代码"></a>JS 全代码 </h2>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Plugin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2048 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Helpful Links</title>
      <link href="/posts/64322/"/>
      <url>/posts/64322/</url>
      
        <content type="html"><![CDATA[<p>Helpful Links</p><a id="more"></a><h3 id="Frameworkds"><a href="#Frameworkds" class="headerlink" title="Frameworkds"></a>Frameworkds</h3><p><a href="//docs.phonegap.com/" target="_blank" rel="noopener">PhoneGap Documentation</a><br><a href="//api.jquery.com/" target="_blank" rel="noopener">jQuery API Documentation</a><br><a href="//getbootstrap.com/docs/4.3/getting-started/introduction/" target="_blank" rel="noopener">Bootstrap Documentation</a><br><a href="//codeigniter.com/user_guide/" target="_blank" rel="noopener">CodeIgniter User Guide</a><br><a href="//laravel.com/docs/5.8" target="_blank" rel="noopener">Laravel Documentation</a></p><h3 id="Game-Maker"><a href="#Game-Maker" class="headerlink" title="Game Maker"></a>Game Maker</h3><p><a href="//docs2.yoyogames.com/" target="_blank" rel="noopener">Language Documentation</a></p><h3 id="HTML-CSS-JavaScript"><a href="#HTML-CSS-JavaScript" class="headerlink" title="HTML, CSS, JavaScript"></a>HTML, CSS, JavaScript</h3><p><a href="//www.w3schools.com/" target="_blank" rel="noopener">W3schools Portal</a><br><a href="//www.csszengarden.com/" target="_blank" rel="noopener">CSS Zen Garden</a><br><a href="//www.cssdrive.com/imagepalette/index.php" target="_blank" rel="noopener">Color Pallete Generator</a><br><a href="//validator.w3.org/" target="_blank" rel="noopener">HTML Validator</a><br><a href="//jigsaw.w3.org/css-validator/" target="_blank" rel="noopener">CSS Validator</a><br><a href="//developer.mozilla.org/en-US/docs/Web/JavaScript/Guide" target="_blank" rel="noopener">JavaScript Guide</a></p><h3 id="NET"><a href="#NET" class="headerlink" title=".NET"></a>.NET</h3><p><a href="//docs.microsoft.com/en-us/dotnet/visual-basic/" target="_blank" rel="noopener">VB Documentation - Microsoft</a><br><a href="//docs.microsoft.com/en-us/dotnet/csharp/" target="_blank" rel="noopener">C# Documentation - Microsoft</a><br><a href="//docs.microsoft.com/en-us/aspnet/" target="_blank" rel="noopener">ASP.NET Documentation - Microsoft</a></p><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><p><a href="//www.php.net/docs.php" target="_blank" rel="noopener">Language Documentation</a></p><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p><a href="//docs.oracle.com/javase/8/docs/api/" target="_blank" rel="noopener">Language Documentation</a><br><a href="//docs.oracle.com/javase/specs/jls/se8/html/jls-17.html" target="_blank" rel="noopener">Threads and Locks - Oracle</a><br><a href="//docs.oracle.com/javase/tutorial/essential/concurrency/index.html" target="_blank" rel="noopener">Concurrency - Oracle</a></p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p><a href="//docs.scipy.org/doc/scipy/reference/" target="_blank" rel="noopener">SciPy Reference</a><br><a href="//docs.scipy.org/doc/numpy/reference/index.html" target="_blank" rel="noopener">NumPy Reference</a><br><a href="//docs.python.org/3/" target="_blank" rel="noopener">Python3 Documentation</a><br><a href="//www.w3schools.com/python/" target="_blank" rel="noopener">Python Tutorial - W3schools</a></p><h3 id="Swift"><a href="#Swift" class="headerlink" title="Swift"></a>Swift</h3><p><a href="//docs.swift.org/swift-book/ReferenceManual/AboutTheLanguageReference.html" target="_blank" rel="noopener">Language Documentation</a><br><a href="//developer.apple.com/documentation/" target="_blank" rel="noopener">Apple Developer Documentation</a></p><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><p><a href="//sqlzoo.net/" target="_blank" rel="noopener">SQLZOO Portal</a><br><a href="//www.w3schools.com/sql/default.asp" target="_blank" rel="noopener">SQL Tutorial - W3schools</a></p><h3 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h3><p><a href="//www.ibm.com/developerworks/cn/rational/r-uml/index.html" target="_blank" rel="noopener">UML - IBM Developers</a><br><a href="//docs.microsoft.com/zh-cn/visualstudio/modeling/create-models-for-your-app?view=vs-2015" target="_blank" rel="noopener">Modeling Documentation - Microsoft</a><br><a href="//www.uml-diagrams.org/" target="_blank" rel="noopener">uml-diagrams.org</a></p><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p><a href="//nodejs.org/api/" target="_blank" rel="noopener">Node.js API</a><br><a href="//expressjs.com/en/4x/api.html" target="_blank" rel="noopener">Express.js</a><br><a href="//www.sqlitetutorial.net/sqlite-nodejs/" target="_blank" rel="noopener">SQLite3.js</a><br><a href="//www.npmjs.com/package/slackbots" target="_blank" rel="noopener">Slackbots.js</a><br><a href="//socket.io/docs/" target="_blank" rel="noopener">Socket.io</a><br><a href="//redis.js.org/" target="_blank" rel="noopener">Redis.js</a><br><a href="//vuejs.org/v2/api/" target="_blank" rel="noopener">Vue.js</a><br><a href="//vuex.vuejs.org/guide/" target="_blank" rel="noopener">Vuex</a></p><h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><p><a href="//developer.android.com/reference" target="_blank" rel="noopener">Android Developers Reference</a><br><a href="//www.seleniumhq.org/selenium-ide/docs/en/api/commands/" target="_blank" rel="noopener">Selenium Command Documentation</a><br><a href="//en.wikipedia.org/wiki/Representational_state_transfer#Relationship_between_URL_and_HTTP_methods" target="_blank" rel="noopener">REST API standard</a></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Links </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo!</title>
      <link href="/posts/9628/"/>
      <url>/posts/9628/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="//hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="//hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="//hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="//github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;My New Post&quot;</span><br></pre></td></tr></table></figure><p>More info: <a href="//hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>More info: <a href="//hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><p>More info: <a href="//hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>More info: <a href="//hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="Generate-and-deploy"><a href="#Generate-and-deploy" class="headerlink" title="Generate and deploy"></a>Generate and deploy</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure><h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean --debug</span><br><span class="line">$ hexo g --debug</span><br></pre></td></tr></table></figure><hr><blockquote><p>Editing of original generated post “Hello World”</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Command </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
