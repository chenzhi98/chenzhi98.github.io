<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>将本地项目上传到Github</title>
      <link href="/2020/06/26/%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Github/"/>
      <url>/2020/06/26/%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Github/</url>
      
        <content type="html"><![CDATA[<h5 id="第一步：我们需要先创建一个本地的版本库（其实也就是一个文件夹）。"><a href="#第一步：我们需要先创建一个本地的版本库（其实也就是一个文件夹）。" class="headerlink" title="第一步：我们需要先创建一个本地的版本库（其实也就是一个文件夹）。"></a>第一步：我们需要先创建一个本地的版本库（其实也就是一个文件夹）。</h5><p>   你可以直接右击新建文件夹，也可以右击打开Git bash命令行窗口通过命令来创建。</p><p>   现在我通过命令行在桌面新建一个TEST文件夹（你也可以在其他任何地方创建这个文件夹），并且进入这个文件夹</p><p><img src="/.com//E:%5Cblog%5Csource_posts%5C%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Github%5C1.jpg" alt="1"></p><h5 id="第二步：通过命令git-init把这个文件夹变成Git可管理的仓库"><a href="#第二步：通过命令git-init把这个文件夹变成Git可管理的仓库" class="headerlink" title="第二步：通过命令git init把这个文件夹变成Git可管理的仓库"></a>第二步：通过命令git init把这个文件夹变成Git可管理的仓库</h5><p><img src="/.com//E:%5Cblog%5Csource_posts%5C%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Github%5C2.png" alt="2"></p><p>​    这时你会发现TEST里面多了个.git文件夹，它是Git用来跟踪和管理版本库的。如果你看不到，是因为它默认是隐藏文件，那你就需要设置一下让隐藏文件可见。</p><p><img src="/.com//E:%5Cblog%5Csource_posts%5C%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Github%5C3.png" alt="3"></p><h5 id="第三步：这时候你就可以把你的项目粘贴到这个本地Git仓库里面（粘贴后你可以通过git-status来查看你当前的状态），然后通过git-add把项目添加到仓库（或git-add-把该目录下的所有文件添加到仓库，注意点是用空格隔开的）。在这个过程中你其实可以一直使用git-status来查看你当前的状态。"><a href="#第三步：这时候你就可以把你的项目粘贴到这个本地Git仓库里面（粘贴后你可以通过git-status来查看你当前的状态），然后通过git-add把项目添加到仓库（或git-add-把该目录下的所有文件添加到仓库，注意点是用空格隔开的）。在这个过程中你其实可以一直使用git-status来查看你当前的状态。" class="headerlink" title="第三步：这时候你就可以把你的项目粘贴到这个本地Git仓库里面（粘贴后你可以通过git status来查看你当前的状态），然后通过git add把项目添加到仓库（或git add .把该目录下的所有文件添加到仓库，注意点是用空格隔开的）。在这个过程中你其实可以一直使用git status来查看你当前的状态。"></a>第三步：这时候你就可以把你的项目粘贴到这个本地Git仓库里面（粘贴后你可以通过git status来查看你当前的状态），然后通过git add把项目添加到仓库（或git add .把该目录下的所有文件添加到仓库，注意点是用空格隔开的）。在这个过程中你其实可以一直使用git status来查看你当前的状态。</h5><p><img src="/.com//E:%5Cblog%5Csource_posts%5C%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Github%5C4.png" alt="4"></p><p><img src="/.com//E:%5Cblog%5Csource_posts%5C%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Github%5C5.png" alt="5"></p><p>​    这里提示你虽然把项目粘贴过来了，但还没有add到Git仓库上，然后我们通过git add .把刚才复制过来的项目全部添加到仓库上。</p><p><img src="/.com//E:%5Cblog%5Csource_posts%5C%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Github%5C6.png" alt="6"></p><p><img src="/.com//E:%5Cblog%5Csource_posts%5C%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Github%5C7.png" alt="7"></p><h5 id="第四步：用git-commit把项目提交到仓库。"><a href="#第四步：用git-commit把项目提交到仓库。" class="headerlink" title="第四步：用git commit把项目提交到仓库。"></a>第四步：用git commit把项目提交到仓库。</h5><p><img src="/.com//E:%5Cblog%5Csource_posts%5C%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Github%5C8.png" alt="8"></p><p>​    -m后面引号里面是本次提交的注释内容，这个可以不写，但最好写上，不然会报错，详情自行Google。 好了，我们本地Git仓库这边的工作做完了，下面就到了连接远程仓库（也就是连接Github）</p><p>  由于本地Git仓库和Github仓库之间的传输是通过SSH加密的，所以连接时需要设置一下：</p><h5 id="第五步：创建SSH-KEY。先看一下你C盘用户目录下有没有-ssh目录，有的话看下里面有没有id-rsa和id-rsa-pub这两个文件，有就跳到下一步，没有就通过下面命令创建"><a href="#第五步：创建SSH-KEY。先看一下你C盘用户目录下有没有-ssh目录，有的话看下里面有没有id-rsa和id-rsa-pub这两个文件，有就跳到下一步，没有就通过下面命令创建" class="headerlink" title="第五步：创建SSH KEY。先看一下你C盘用户目录下有没有.ssh目录，有的话看下里面有没有id_rsa和id_rsa.pub这两个文件，有就跳到下一步，没有就通过下面命令创建"></a>第五步：创建SSH KEY。先看一下你C盘用户目录下有没有.ssh目录，有的话看下里面有没有id_rsa和id_rsa.pub这两个文件，有就跳到下一步，没有就通过下面命令创建</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure><p>​    然后一路回车。这时你就会在用户下的.ssh目录里找到id_rsa和id_rsa.pub这两个文件  </p><p><img src="/.com//E:%5Cblog%5Csource_posts%5C%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Github%5C9.png" alt="9"></p><h5 id="第六步：登录Github-找到右上角的图标，打开点进里面的Settings，再选中里面的SSH-and-GPG-KEYS，点击右上角的New-SSH-key，然后Title里面随便填，再把刚才id-rsa-pub里面的内容复制到Title下面的Key内容框里面，最后点击Add-SSH-key，这样就完成了SSH-Key的加密。具体步骤也可看下面："><a href="#第六步：登录Github-找到右上角的图标，打开点进里面的Settings，再选中里面的SSH-and-GPG-KEYS，点击右上角的New-SSH-key，然后Title里面随便填，再把刚才id-rsa-pub里面的内容复制到Title下面的Key内容框里面，最后点击Add-SSH-key，这样就完成了SSH-Key的加密。具体步骤也可看下面：" class="headerlink" title="第六步：登录Github,找到右上角的图标，打开点进里面的Settings，再选中里面的SSH and GPG KEYS，点击右上角的New SSH key，然后Title里面随便填，再把刚才id_rsa.pub里面的内容复制到Title下面的Key内容框里面，最后点击Add SSH key，这样就完成了SSH Key的加密。具体步骤也可看下面："></a>第六步：登录Github,找到右上角的图标，打开点进里面的Settings，再选中里面的SSH and GPG KEYS，点击右上角的New SSH key，然后Title里面随便填，再把刚才id_rsa.pub里面的内容复制到Title下面的Key内容框里面，最后点击Add SSH key，这样就完成了SSH Key的加密。具体步骤也可看下面：</h5><p><img src="/.com//E:%5Cblog%5Csource_posts%5C%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Github%5C10.png" alt="10"></p><p><img src="/.com//E:%5Cblog%5Csource_posts%5C%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Github%5C11.png" alt="11"></p><p><img src="/.com//E:%5Cblog%5Csource_posts%5C%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Github%5C12.png" alt="12"></p><h5 id="第七步：在Github上创建一个Git仓库。"><a href="#第七步：在Github上创建一个Git仓库。" class="headerlink" title="第七步：在Github上创建一个Git仓库。"></a>第七步：在Github上创建一个Git仓库。</h5><p> 你可以直接点New repository来创建，比如我创建了一个TEST2的仓库（因为我里面已经有了一个test的仓库，所以不能再创建TEST仓库）。</p><p><img src="/.com//E:%5Cblog%5Csource_posts%5C%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Github%5C13.png" alt="13"></p><h5 id="第八步：在Github上创建好Git仓库之后我们就可以和本地仓库进行关联了，根据创建好的Git仓库页面的提示，可以在本地TEST仓库的命令行输入："><a href="#第八步：在Github上创建好Git仓库之后我们就可以和本地仓库进行关联了，根据创建好的Git仓库页面的提示，可以在本地TEST仓库的命令行输入：" class="headerlink" title="第八步：在Github上创建好Git仓库之后我们就可以和本地仓库进行关联了，根据创建好的Git仓库页面的提示，可以在本地TEST仓库的命令行输入："></a>第八步：在Github上创建好Git仓库之后我们就可以和本地仓库进行关联了，根据创建好的Git仓库页面的提示，可以在本地TEST仓库的命令行输入：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin https:&#x2F;&#x2F;github.com&#x2F;guyibang&#x2F;TEST2.git</span><br></pre></td></tr></table></figure><p><img src="/.com//E:%5Cblog%5Csource_posts%5C%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Github%5C14.png" alt="14"></p><p> 注意origin后面加的是你Github上创建好的仓库的地址。</p><h5 id="第九步：关联好之后我们就可以把本地库的所有内容推送到远程仓库（也就是Github）上了，通过："><a href="#第九步：关联好之后我们就可以把本地库的所有内容推送到远程仓库（也就是Github）上了，通过：" class="headerlink" title="第九步：关联好之后我们就可以把本地库的所有内容推送到远程仓库（也就是Github）上了，通过："></a>第九步：关<img src="/.com//E:%5Cblog%5Csource_posts%5C%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Github%5C15.png" alt="15">联好之后我们就可以把本地库的所有内容推送到远程仓库（也就是Github）上了，通过：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure><p>​    由于新建的远程仓库是空的，所以要加上-u这个参数，等远程仓库里面有了内容之后，下次再从本地库上传内容的时候只需下面这样就可以了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure><p>​        上传项目的过程可能需要等一段时间，完成之后是这样的：</p><p>​        上传项目的过程可能需要等一段时间，完成之后是这样的：</p><p><img src="/.com//E:%5Cblog%5Csource_posts%5C%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Github%5C16.png" alt="16"></p><p>​    这时候你再重新刷新你的Github页面进入刚才新建的那个仓库里面就会发现项目已经成功上传了：</p><p><img src="/.com//E:%5Cblog%5Csource_posts%5C%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Github%5C17.png" alt="17"></p><p>​    至此就完成了将本地项目上传到Github的整个过程。</p><p>​    另外，这里有个坑需要注意一下，就是在上面第七步创建远程仓库的时候，如果你勾选了Initialize this repository with a README（就是创建仓库的时候自动给你创建一个README文件），那么到了第九步你将本地仓库内容推送到远程仓库的时候就会报一个failed to push some refs to <a href="https://github.com/guyibang/TEST2.git的错。" target="_blank" rel="noopener">https://github.com/guyibang/TEST2.git的错。</a></p><p><img src="/.com//E:%5Cblog%5Csource_posts%5C%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Github%5C18.png" alt="18"></p><p>​    这是由于你新创建的那个仓库里面的README文件不在本地仓库目录中，这时我们可以通过以下命令先将内容合并以下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull --rebase origin master</span><br></pre></td></tr></table></figure><p><img src="/.com//E:%5Cblog%5Csource_posts%5C%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E5%88%B0Github%5C19.png" alt="19"></p><p>​    这时你再push就能成功了。</p><pre><code>总结：其实只需要进行下面几步就能把本地项目上传到Github1、在本地创建一个版本库（即文件夹），通过git init把它变成Git仓库；2、把项目复制到这个文件夹里面，再通过git add .把项目添加到仓库；3、再通过git commit -m &quot;注释内容&quot;把项目提交到仓库；4、在Github上设置好SSH密钥后，新建一个远程仓库，通过git remote add origin https://github.com/guyibang/TEST2.git将本地仓库和远程仓库进行关联；5、最后通过git push -u origin master把本地仓库的项目推送到远程仓库（也就是Github）上；（若新建远程仓库的时候自动创建了README文件会报错，解决办法看上面）。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机</title>
      <link href="/2020/06/26/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
      <url>/2020/06/26/%E8%AE%A1%E7%AE%97%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<p>我爱计算机</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
